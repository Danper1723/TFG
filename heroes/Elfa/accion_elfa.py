import random
import sqlite3

import pygame
import math


class Accion_elfa:
    #imgs = []

    def __init__(self):

        self.width = 64
        self.height = 64
        self.contador_animacion = 0
        self.vel = 3

        self.path = [(10000,10000)]
        self.path1 = []
        self.path2v = []
        self.path2d = []
        self.path3v = []
        self.path3d = []
        self.x = self.path[0][0]
        self.y = self.path[0][1]

        self.img = None
        self.dis = 0
        self.path_pos = 0
        self.cont_mover = 0
        self.dist_mover = 0

        self.nombre = ""
        self.estado = False
        self.torre_1_derecha = 1
        self.torre_2_derecha = 1
        self.torre_1_izquierda = 1
        self.torre_2_izquierda = 1

        self.posicion = 0
        self.linea = ""
        self.cont = 0

        self.dano = 35
        self.health = 650  # Barra de vida
        self.max_health = 650  # Barra de vida
        self.armadura = 15

    def draw(self, win):
        
        self.nombre = self.id
        """
        DIBUJA A LOS ENEMIGOS CON LAS IMAGENES ESTABLECIDAS
        :param win: SURFACE
        """
        conexion = sqlite3.connect('../datos.db')
        cursor = conexion.cursor()
        if self.estado:
            if self.linea == "top":
                if self.posicion == 1:
                    print("1 top")
                    self.path = [(10000,10000),(493,768),(493,765),(493,762),(493,759),(493,756),(493,753),(493,750),(493,747),(493,744),(493,741),(493,738),(493,735),(493,732),(493,729),(493,726),(493,723),(493,720),(493,717),(493,714),(493,711),(493,708),(493,705),(493,702),(493,699),(493,696),(493,693),(493,690),(493,687),(493,684),(493,681),(493,678),(493,675),(493,672),(493,669),(493,666),(493,663),(493,660),(493,657),(493,654),(493,651),(493,648),(493,645),(493,642),(493,639),(493,636),(493,633),(493,630),(493,627),(493,624),(493,621),(493,618),(493,615),(493,612),(493,609),(493,606),(493,603),(493,600),(493,597),(493,594),(493,591),(493,588),(493,585),(493,582),(493,579),(493,576),(493,573),(493,570),(493,567),(493,564),(493,561),(493,558),(493,555),(493,552),(493,549),(493,546),(493,543),(493,540),(493,537),(493,534),(493,531),(493,528),(493,525),(493,522),(493,519),(493,516),(493,513),(493,510),(493,507),(493,504),(493,501),(493,498),(493,495),(493,492),(493,489),(493,486),(493,483),(493,480),(493,477),(493,474),(493,471),(493,468),(493,465),(493,462),(493,459),(493,456),(493,453),(493,450),(493,447),(493,444),(493,441),(493,438),(493,435),(493,432),(493,429),(493,426),(493,423),(493,420),(493,417),(493,414),(493,411),(493,408),(493,405),(493,402),(493,399),(493,396),(493,393),(493,390),(493,387),(493,384),(493,381),(493,378),(493,375),(493,372),(493,369),(493,366),(493,363),(493,360),(493,357),(493,354),(493,351),(493,348),(493,345),(493,342),(493,339),(493,336),(493,333),(493,330),(493,327),(493,324),(493,321),(493,318),(493,315),(493,312),(493,309),(493,306),(493,303),(493,300),(493,297),(493,294),(493,291),(493,288),(496,285),(499,282),(502,279)]
                    self.path1 = [(10000,10000),(493,768),(493,765),(493,762),(493,759),(493,756),(493,753),(493,750),(493,747),(493,744),(493,741),(493,738),(493,735),(493,732),(493,729),(493,726),(493,723),(493,720),(493,717),(493,714),(493,711),(493,708),(493,705),(493,702),(493,699),(493,696),(493,693),(493,690),(493,687),(493,684),(493,681),(493,678),(493,675),(493,672),(493,669),(493,666),(493,663),(493,660),(493,657),(493,654),(493,651),(493,648),(493,645),(493,642),(493,639),(493,636),(493,633),(493,630),(493,627),(493,624),(493,621),(493,618),(493,615),(493,612),(493,609),(493,606),(493,603),(493,600),(493,597),(493,594),(493,591),(493,588),(493,585),(493,582),(493,579),(493,576),(493,573),(493,570),(493,567),(493,564),(493,561),(493,558),(493,555),(493,552),(493,549),(493,546),(493,543),(493,540),(493,537),(493,534),(493,531),(493,528),(493,525),(493,522),(493,519),(493,516),(493,513),(493,510),(493,507),(493,504),(493,501),(493,498),(493,495),(493,492),(493,489),(493,486),(493,483),(493,480),(493,477),(493,474),(493,471),(493,468),(493,465),(493,462),(493,459),(493,456),(493,453),(493,450),(493,447),(493,444),(493,441),(493,438),(493,435),(493,432),(493,429),(493,426),(493,423),(493,420),(493,417),(493,414),(493,411),(493,408),(493,405),(493,402),(493,399),(493,396),(493,393),(493,390),(493,387),(493,384),(493,381),(493,378),(493,375),(493,372),(493,369),(493,366),(493,363),(493,360),(493,357),(493,354),(493,351),(493,348),(493,345),(493,342),(493,339),(493,336),(493,333),(493,330),(493,327),(493,324),(493,321),(493,318),(493,315),(493,312),(493,309),(493,306),(493,303),(493,300),(493,297),(493,294),(493,291),(493,288),(496,285),(499,282),(502,279)]
                    self.path2v = [(10000,10000),(493,768),(493,765),(493,762),(493,759),(493,756),(493,753),(493,750),(493,747),(493,744),(493,741),(493,738),(493,735),(493,732),(493,729),(493,726),(493,723),(493,720),(493,717),(493,714),(493,711),(493,708),(493,705),(493,702),(493,699),(493,696),(493,693),(493,690),(493,687),(493,684),(493,681),(493,678),(493,675),(493,672),(493,669),(493,666),(493,663),(493,660),(493,657),(493,654),(493,651),(493,648),(493,645),(493,642),(493,639),(493,636),(493,633),(493,630),(493,627),(493,624),(493,621),(493,618),(493,615),(493,612),(493,609),(493,606),(493,603),(493,600),(493,597),(493,594),(493,591),(493,588),(493,585),(493,582),(493,579),(493,576),(493,573),(493,570),(493,567),(493,564),(493,561),(493,558),(493,555),(493,552),(493,549),(493,546),(493,543),(493,540),(493,537),(493,534),(493,531),(493,528),(493,525),(493,522),(493,519),(493,516),(493,513),(493,510),(493,507),(493,504),(493,501),(493,498),(493,495),(493,492),(493,489),(493,486),(493,483),(493,480),(493,477),(493,474),(493,471),(493,468),(493,465),(493,462),(493,459),(493,456),(493,453),(493,450),(493,447),(493,444),(493,441),(493,438),(493,435),(493,432),(493,429),(493,426),(493,423),(493,420),(493,417),(493,414),(493,411),(493,408),(493,405),(493,402),(493,399),(493,396),(493,393),(493,390),(493,387),(493,384),(493,381),(493,378),(493,375),(493,372),(493,369),(493,366),(493,363),(493,360),(493,357),(493,354),(493,351),(493,348),(493,345),(493,342),(493,339),(493,336),(493,333),(493,330),(493,327),(493,324),(493,321),(493,318),(493,315),(493,312),(493,309),(493,306),(493,303),(493,300),(493,297),(493,294),(493,291),(493,288),(496,285),(499,282),(502,279),(505,276),(508,273),(511,270),(514,267),(517,264),(520,261),(523,258),(526,255),(529,252),(532,249),(535,246),(538,243),(541,240),(544,237),(547,234),(550,231),(553,228),(556,225),(559,222),(562,219),(565,216),(568,213),(571,210),(574,207),(577,204),(580,201),(583,198),(586,195),(589,192),(592,189),(595,186),(598,183),(601,180),(604,177),(607,174),(610,171),(613,168),(616,165),(619,162),(622,159),(625,156),(628,153),(631,150),(634,147),(637,144),(640,141),(643,138),(646,135),(649,132),(652,129),(655,126),(658,126),(661,126),(664,126),(667,126),(670,126),(673,126),(676,126),(679,126),(682,126),(685,126),(688,126),(691,126),(694,126),(697,126),(700,126),(703,126),(706,126),(709,126),(712,126),(715,126),(718,126),(721,126),(724,126),(727,126),(730,126),(733,126),(736,126),(739,126),(742,126),(745,126),(748,126),(751,126),(754,126),(757,126),(760,126),(763,126),(766,126),(769,126),(772,126),(775,126),(778,126),(781,126),(784,126),(787,126),(790,126),(793,126),(796,126),(799,126),(802,126),(805,126),(808,126),(811,126),(814,126),(817,126),(820,126),(823,126),(826,126),(829,126)]
                    self.path3v = [(10000,10000),(493,768),(493,765),(493,762),(493,759),(493,756),(493,753),(493,750),(493,747),(493,744),(493,741),(493,738),(493,735),(493,732),(493,729),(493,726),(493,723),(493,720),(493,717),(493,714),(493,711),(493,708),(493,705),(493,702),(493,699),(493,696),(493,693),(493,690),(493,687),(493,684),(493,681),(493,678),(493,675),(493,672),(493,669),(493,666),(493,663),(493,660),(493,657),(493,654),(493,651),(493,648),(493,645),(493,642),(493,639),(493,636),(493,633),(493,630),(493,627),(493,624),(493,621),(493,618),(493,615),(493,612),(493,609),(493,606),(493,603),(493,600),(493,597),(493,594),(493,591),(493,588),(493,585),(493,582),(493,579),(493,576),(493,573),(493,570),(493,567),(493,564),(493,561),(493,558),(493,555),(493,552),(493,549),(493,546),(493,543),(493,540),(493,537),(493,534),(493,531),(493,528),(493,525),(493,522),(493,519),(493,516),(493,513),(493,510),(493,507),(493,504),(493,501),(493,498),(493,495),(493,492),(493,489),(493,486),(493,483),(493,480),(493,477),(493,474),(493,471),(493,468),(493,465),(493,462),(493,459),(493,456),(493,453),(493,450),(493,447),(493,444),(493,441),(493,438),(493,435),(493,432),(493,429),(493,426),(493,423),(493,420),(493,417),(493,414),(493,411),(493,408),(493,405),(493,402),(493,399),(493,396),(493,393),(493,390),(493,387),(493,384),(493,381),(493,378),(493,375),(493,372),(493,369),(493,366),(493,363),(493,360),(493,357),(493,354),(493,351),(493,348),(493,345),(493,342),(493,339),(493,336),(493,333),(493,330),(493,327),(493,324),(493,321),(493,318),(493,315),(493,312),(493,309),(493,306),(493,303),(493,300),(493,297),(493,294),(493,291),(493,288),(496,285),(499,282),(502,279),(505,276),(508,273),(511,270),(514,267),(517,264),(520,261),(523,258),(526,255),(529,252),(532,249),(535,246),(538,243),(541,240),(544,237),(547,234),(550,231),(553,228),(556,225),(559,222),(562,219),(565,216),(568,213),(571,210),(574,207),(577,204),(580,201),(583,198),(586,195),(589,192),(592,189),(595,186),(598,183),(601,180),(604,177),(607,174),(610,171),(613,168),(616,165),(619,162),(622,159),(625,156),(628,153),(631,150),(634,147),(637,144),(640,141),(643,138),(646,135),(649,132),(652,129),(655,126),(658,126),(661,126),(664,126),(667,126),(670,126),(673,126),(676,126),(679,126),(682,126),(685,126),(688,126),(691,126),(694,126),(697,126),(700,126),(703,126),(706,126),(709,126),(712,126),(715,126),(718,126),(721,126),(724,126),(727,126),(730,126),(733,126),(736,126),(739,126),(742,126),(745,126),(748,126),(751,126),(754,126),(757,126),(760,126),(763,126),(766,126),(769,126),(772,126),(775,126),(778,126),(781,126),(784,126),(787,126),(790,126),(793,126),(796,126),(799,126),(802,126),(805,126),(808,126),(811,126),(814,126),(817,126),(820,126),(823,126),(826,126),(829,126),(832,126),(835,126),(838,126),(841,126),(844,126),(847,126),(850,126),(853,126),(856,126),(859,126),(862,126),(865,126),(868,126),(871,126),(874,126),(877,126),(880,126),(883,126),(886,126),(889,126),(892,126),(895,126),(898,126),(901,126),(904,126),(907,126),(910,126),(913,126),(916,126),(919,126),(922,126),(925,126),(928,126),(931,126),(934,126),(937,126),(940,126),(943,126),(946,126),(949,126),(952,126),(955,126),(958,126),(961,126),(964,126),(967,126),(970,126),(973,126),(976,126),(979,126),(982,126),(985,126),(988,126),(991,126),(994,126),(997,126),(1000,126)]
                    self.path2d = [(10000,10000),(493,768),(493,765),(493,762),(493,759),(493,756),(493,753),(493,750),(493,747),(493,744),(493,741),(493,738),(493,735),(493,732),(493,729),(493,726),(493,723),(493,720),(493,717),(493,714),(493,711),(493,708),(493,705),(493,702),(493,699),(493,696),(493,693),(493,690),(493,687),(493,684),(493,681),(493,678),(493,675),(493,672),(493,669),(493,666),(493,663),(493,660),(493,657),(493,654),(493,651),(493,648),(493,645)]
                    self.path3d = [(10000,10000),(493,768),(493,765),(493,762),(493,759),(493,756),(493,753)]

                    if not self.cont:
                        self.x = self.path[0][0]
                        self.y = self.path[0][1]
                        self.cont = 1
                elif self.posicion == 2:
                    print("2 top")
                    self.path = [(10000,10000),(535,768),(535,765),(535,762),(535,759),(535,756),(535,753),(535,750),(535,747),(535,744),(535,741),(535,738),(535,735),(535,732),(535,729),(535,726),(535,723),(535,720),(535,717),(535,714),(535,711),(535,708),(535,705),(535,702),(535,699),(535,696),(535,693),(535,690),(535,687),(535,684),(535,681),(535,678),(535,675),(535,672),(535,669),(535,666),(535,663),(535,660),(535,657),(535,654),(535,651),(535,648),(535,645),(535,642),(535,639),(535,636),(535,633),(535,630),(535,627),(535,624),(535,621),(535,618),(535,615),(535,612),(535,609),(535,606),(535,603),(535,600),(535,597),(535,594),(535,591),(535,588),(535,585),(535,582),(535,579),(535,576),(535,573),(535,570),(535,567),(535,564),(535,561),(535,558),(535,555),(535,552),(535,549),(535,546),(535,543),(535,540),(535,537),(535,534),(535,531),(535,528),(535,525),(535,522),(535,519),(535,516),(535,513),(535,510),(535,507),(535,504),(535,501),(535,498),(535,495),(535,492),(535,489),(535,486),(535,483),(535,480),(535,477),(535,474),(535,471),(535,468),(535,465),(535,462),(535,459),(535,456),(535,453),(535,450),(535,447),(535,444),(535,441),(535,438),(535,435),(535,432),(535,429),(535,426),(535,423),(535,420),(535,417),(535,414),(535,411),(535,408),(535,405),(535,402),(535,399),(535,396),(535,393),(535,390),(535,387),(535,384),(535,381),(535,378),(535,375),(535,372),(535,369),(535,366),(535,363),(535,360),(535,357),(535,354),(535,351),(535,348),(535,345),(535,342),(535,339),(535,336),(535,333),(535,330),(535,327),(535,324),(535,321),(535,318),(535,318),(535,318),(535,318),(535,318),(535,318),(535,318),(535,318),(535,318),(535,318),(538,315),(541,312)]
                    self.path1 = [(10000,10000),(535,768),(535,765),(535,762),(535,759),(535,756),(535,753),(535,750),(535,747),(535,744),(535,741),(535,738),(535,735),(535,732),(535,729),(535,726),(535,723),(535,720),(535,717),(535,714),(535,711),(535,708),(535,705),(535,702),(535,699),(535,696),(535,693),(535,690),(535,687),(535,684),(535,681),(535,678),(535,675),(535,672),(535,669),(535,666),(535,663),(535,660),(535,657),(535,654),(535,651),(535,648),(535,645),(535,642),(535,639),(535,636),(535,633),(535,630),(535,627),(535,624),(535,621),(535,618),(535,615),(535,612),(535,609),(535,606),(535,603),(535,600),(535,597),(535,594),(535,591),(535,588),(535,585),(535,582),(535,579),(535,576),(535,573),(535,570),(535,567),(535,564),(535,561),(535,558),(535,555),(535,552),(535,549),(535,546),(535,543),(535,540),(535,537),(535,534),(535,531),(535,528),(535,525),(535,522),(535,519),(535,516),(535,513),(535,510),(535,507),(535,504),(535,501),(535,498),(535,495),(535,492),(535,489),(535,486),(535,483),(535,480),(535,477),(535,474),(535,471),(535,468),(535,465),(535,462),(535,459),(535,456),(535,453),(535,450),(535,447),(535,444),(535,441),(535,438),(535,435),(535,432),(535,429),(535,426),(535,423),(535,420),(535,417),(535,414),(535,411),(535,408),(535,405),(535,402),(535,399),(535,396),(535,393),(535,390),(535,387),(535,384),(535,381),(535,378),(535,375),(535,372),(535,369),(535,366),(535,363),(535,360),(535,357),(535,354),(535,351),(535,348),(535,345),(535,342),(535,339),(535,336),(535,333),(535,330),(535,327),(535,324),(535,321),(535,318),(535,318),(535,318),(535,318),(535,318),(535,318),(535,318),(535,318),(535,318),(535,318),(538,315),(541,312)]
                    self.path2v = [(10000,10000),(535,768),(535,765),(535,762),(535,759),(535,756),(535,753),(535,750),(535,747),(535,744),(535,741),(535,738),(535,735),(535,732),(535,729),(535,726),(535,723),(535,720),(535,717),(535,714),(535,711),(535,708),(535,705),(535,702),(535,699),(535,696),(535,693),(535,690),(535,687),(535,684),(535,681),(535,678),(535,675),(535,672),(535,669),(535,666),(535,663),(535,660),(535,657),(535,654),(535,651),(535,648),(535,645),(535,642),(535,639),(535,636),(535,633),(535,630),(535,627),(535,624),(535,621),(535,618),(535,615),(535,612),(535,609),(535,606),(535,603),(535,600),(535,597),(535,594),(535,591),(535,588),(535,585),(535,582),(535,579),(535,576),(535,573),(535,570),(535,567),(535,564),(535,561),(535,558),(535,555),(535,552),(535,549),(535,546),(535,543),(535,540),(535,537),(535,534),(535,531),(535,528),(535,525),(535,522),(535,519),(535,516),(535,513),(535,510),(535,507),(535,504),(535,501),(535,498),(535,495),(535,492),(535,489),(535,486),(535,483),(535,480),(535,477),(535,474),(535,471),(535,468),(535,465),(535,462),(535,459),(535,456),(535,453),(535,450),(535,447),(535,444),(535,441),(535,438),(535,435),(535,432),(535,429),(535,426),(535,423),(535,420),(535,417),(535,414),(535,411),(535,408),(535,405),(535,402),(535,399),(535,396),(535,393),(535,390),(535,387),(535,384),(535,381),(535,378),(535,375),(535,372),(535,369),(535,366),(535,363),(535,360),(535,357),(535,354),(535,351),(535,348),(535,345),(535,342),(535,339),(535,336),(535,333),(535,330),(535,327),(535,324),(535,321),(535,318),(535,318),(535,318),(535,318),(535,318),(535,318),(535,318),(535,318),(535,318),(535,318),(538,315),(541,312),(544,309),(547,306),(550,303),(553,300),(556,297),(559,294),(562,291),(565,288),(568,285),(571,282),(574,279),(577,276),(580,273),(583,270),(586,267),(589,264),(592,261),(595,258),(598,255),(601,252),(604,249),(607,246),(610,243),(613,240),(616,237),(619,234),(622,231),(625,228),(628,225),(631,222),(634,219),(637,216),(640,213),(643,210),(646,207),(649,204),(652,201),(655,198),(658,195),(661,192),(664,189),(667,186),(670,183),(673,180),(676,177),(679,174),(679,174),(679,174),(679,174),(679,174),(679,174),(679,174),(679,174),(679,174),(679,174),(679,174),(679,174),(679,174),(679,174),(679,174),(679,174),(682,174),(685,174),(688,174),(691,174),(694,174),(697,174),(700,174),(703,174),(706,174),(709,174),(712,174),(715,174),(718,174),(721,174),(724,174),(727,174),(730,174),(733,174),(736,174),(739,174),(742,174),(745,174),(748,174),(751,174),(754,174),(757,174),(760,174),(763,174),(766,174),(769,174),(772,174),(775,174),(778,174),(781,174),(784,174),(787,174),(790,174),(793,174),(796,174),(799,174),(802,174),(805,174),(808,174),(811,174),(814,174),(817,174),(820,174),(823,174),(826,174),(829,174),(832,174),(835,174),(838,174)]
                    self.path3v = [(10000,10000),(535,768),(535,765),(535,762),(535,759),(535,756),(535,753),(535,750),(535,747),(535,744),(535,741),(535,738),(535,735),(535,732),(535,729),(535,726),(535,723),(535,720),(535,717),(535,714),(535,711),(535,708),(535,705),(535,702),(535,699),(535,696),(535,693),(535,690),(535,687),(535,684),(535,681),(535,678),(535,675),(535,672),(535,669),(535,666),(535,663),(535,660),(535,657),(535,654),(535,651),(535,648),(535,645),(535,642),(535,639),(535,636),(535,633),(535,630),(535,627),(535,624),(535,621),(535,618),(535,615),(535,612),(535,609),(535,606),(535,603),(535,600),(535,597),(535,594),(535,591),(535,588),(535,585),(535,582),(535,579),(535,576),(535,573),(535,570),(535,567),(535,564),(535,561),(535,558),(535,555),(535,552),(535,549),(535,546),(535,543),(535,540),(535,537),(535,534),(535,531),(535,528),(535,525),(535,522),(535,519),(535,516),(535,513),(535,510),(535,507),(535,504),(535,501),(535,498),(535,495),(535,492),(535,489),(535,486),(535,483),(535,480),(535,477),(535,474),(535,471),(535,468),(535,465),(535,462),(535,459),(535,456),(535,453),(535,450),(535,447),(535,444),(535,441),(535,438),(535,435),(535,432),(535,429),(535,426),(535,423),(535,420),(535,417),(535,414),(535,411),(535,408),(535,405),(535,402),(535,399),(535,396),(535,393),(535,390),(535,387),(535,384),(535,381),(535,378),(535,375),(535,372),(535,369),(535,366),(535,363),(535,360),(535,357),(535,354),(535,351),(535,348),(535,345),(535,342),(535,339),(535,336),(535,333),(535,330),(535,327),(535,324),(535,321),(535,318),(535,318),(535,318),(535,318),(535,318),(535,318),(535,318),(535,318),(535,318),(535,318),(538,315),(541,312),(544,309),(547,306),(550,303),(553,300),(556,297),(559,294),(562,291),(565,288),(568,285),(571,282),(574,279),(577,276),(580,273),(583,270),(586,267),(589,264),(592,261),(595,258),(598,255),(601,252),(604,249),(607,246),(610,243),(613,240),(616,237),(619,234),(622,231),(625,228),(628,225),(631,222),(634,219),(637,216),(640,213),(643,210),(646,207),(649,204),(652,201),(655,198),(658,195),(661,192),(664,189),(667,186),(670,183),(673,180),(676,177),(679,174),(679,174),(679,174),(679,174),(679,174),(679,174),(679,174),(679,174),(679,174),(679,174),(679,174),(679,174),(679,174),(679,174),(679,174),(679,174),(682,174),(685,174),(688,174),(691,174),(694,174),(697,174),(700,174),(703,174),(706,174),(709,174),(712,174),(715,174),(718,174),(721,174),(724,174),(727,174),(730,174),(733,174),(736,174),(739,174),(742,174),(745,174),(748,174),(751,174),(754,174),(757,174),(760,174),(763,174),(766,174),(769,174),(772,174),(775,174),(778,174),(781,174),(784,174),(787,174),(790,174),(793,174),(796,174),(799,174),(802,174),(805,174),(808,174),(811,174),(814,174),(817,174),(820,174),(823,174),(826,174),(829,174),(832,174),(835,174),(838,174),(841,174),(844,174),(847,174),(850,174),(853,174),(856,174),(859,174),(862,174),(865,174),(868,174),(871,174),(874,174),(877,174),(880,174),(883,174),(886,174),(889,174),(892,174),(895,174),(898,174),(901,174),(904,174),(907,174),(910,174),(913,174),(916,174),(919,174),(922,174),(925,174),(928,174),(931,174),(934,174),(937,174),(940,174),(943,174),(946,174),(949,174),(952,174),(955,174),(958,174),(961,174),(964,174),(967,174),(970,174),(973,174),(976,174),(979,174),(982,174),(985,174),(988,174),(991,174),(994,174),(997,174),(1000,174),(1003,174),(1006,174),(1009,174)]
                    self.path2d = [(10000,10000),(535,768),(535,765),(535,762),(535,759),(535,756),(535,753),(535,750),(535,747),(535,744),(535,741),(535,738),(535,735),(535,732),(535,729),(535,726),(535,723),(535,720),(535,717),(535,714),(535,711),(535,708),(535,705),(535,702),(535,699),(535,696),(535,693),(535,690),(535,687),(535,684),(535,681),(535,678),(535,675),(535,672),(535,669),(535,666),(535,663),(535,660),(535,657),(535,654),(535,651),(535,648),(535,645)]
                    self.path3d = [(10000,10000),(535,768),(535,765),(535,762),(535,759),(535,756),(535,753)]
                    
                    if not self.cont:
                        self.x = self.path[0][0]
                        self.y = self.path[0][1]
                        self.cont = 1

                cursor.execute('SELECT estado FROM torres WHERE nombre = "torre_top_1_derecha"')
                resul = cursor.fetchall()
                for r in resul:
                    self.torre_1_derecha = r[0]
                cursor.execute('SELECT estado FROM torres WHERE nombre = "torre_top_2_derecha"')
                resul = cursor.fetchall()
                for r in resul:
                    self.torre_2_derecha = r[0]
                cursor.execute('SELECT estado FROM torres WHERE nombre = "torre_top_1_izquierda"')
                resul = cursor.fetchall()
                for r in resul:
                    self.torre_1_izquierda = r[0]
                cursor.execute('SELECT estado FROM torres WHERE nombre = "torre_top_2_izquierda"')
                resul = cursor.fetchall()
                for r in resul:
                    self.torre_2_izquierda = r[0]
            elif self.linea == "mid":
                if self.posicion == 1:
                    print("1 mid")
                    self.path = [(10000,10000),(588,781),(591,778),(594,775),(597,772),(600,769),(603,766),(606,763),(609,760),(612,757),(615,754),(618,751),(621,748),(624,745),(627,742),(630,739),(633,736),(636,733),(639,730),(642,727),(645,724),(648,721),(651,718),(654,715),(657,712),(660,709),(663,706),(666,703),(669,700),(672,697),(675,694),(678,691),(681,688),(684,685),(687,682),(690,679),(693,676),(696,673),(699,670),(702,667),(705,664),(708,661),(711,658),(714,655),(717,652),(720,649),(723,646),(726,643),(729,640),(732,637),(735,634),(738,631),(741,628),(744,625),(747,622),(750,619),(753,616),(756,613),(759,610),(762,607),(765,604),(768,601),(771,598),(774,595),(777,592),(780,589),(783,586),(786,583),(789,580),(792,577),(795,574),(798,571),(801,568),(804,565),(807,562),(810,559),(813,556),(816,553),(819,550),(822,547),(825,544),(828,541),(831,538),(834,535),(837,532),(840,529),(843,526),(846,523),(849,520),(852,517),(855,514),(858,511),(861,508),(864,505),(867,502),(870,499),(873,496),(876,493),(879,490),(882,490),(885,490)]
                    self.path1 = [(10000,10000),(588,781),(591,778),(594,775),(597,772),(600,769),(603,766),(606,763),(609,760),(612,757),(615,754),(618,751),(621,748),(624,745),(627,742),(630,739),(633,736),(636,733),(639,730),(642,727),(645,724),(648,721),(651,718),(654,715),(657,712),(660,709),(663,706),(666,703),(669,700),(672,697),(675,694),(678,691),(681,688),(684,685),(687,682),(690,679),(693,676),(696,673),(699,670),(702,667),(705,664),(708,661),(711,658),(714,655),(717,652),(720,649),(723,646),(726,643),(729,640),(732,637),(735,634),(738,631),(741,628),(744,625),(747,622),(750,619),(753,616),(756,613),(759,610),(762,607),(765,604),(768,601),(771,598),(774,595),(777,592),(780,589),(783,586),(786,583),(789,580),(792,577),(795,574),(798,571),(801,568),(804,565),(807,562),(810,559),(813,556),(816,553),(819,550),(822,547),(825,544),(828,541),(831,538),(834,535),(837,532),(840,529),(843,526),(846,523),(849,520),(852,517),(855,514),(858,511),(861,508),(864,505),(867,502),(870,499),(873,496),(876,493),(879,490),(882,490),(885,490)]
                    self.path2v = [(10000,10000),(588,781),(591,778),(594,775),(597,772),(600,769),(603,766),(606,763),(609,760),(612,757),(615,754),(618,751),(621,748),(624,745),(627,742),(630,739),(633,736),(636,733),(639,730),(642,727),(645,724),(648,721),(651,718),(654,715),(657,712),(660,709),(663,706),(666,703),(669,700),(672,697),(675,694),(678,691),(681,688),(684,685),(687,682),(690,679),(693,676),(696,673),(699,670),(702,667),(705,664),(708,661),(711,658),(714,655),(717,652),(720,649),(723,646),(726,643),(729,640),(732,637),(735,634),(738,631),(741,628),(744,625),(747,622),(750,619),(753,616),(756,613),(759,610),(762,607),(765,604),(768,601),(771,598),(774,595),(777,592),(780,589),(783,586),(786,583),(789,580),(792,577),(795,574),(798,571),(801,568),(804,565),(807,562),(810,559),(813,556),(816,553),(819,550),(822,547),(825,544),(828,541),(831,538),(834,535),(837,532),(840,529),(843,526),(846,523),(849,520),(852,517),(855,514),(858,511),(861,508),(864,505),(867,502),(870,499),(873,496),(876,493),(879,490),(879,490),(879,490),(879,490),(882,490),(885,490),(888,490),(891,490),(894,490),(897,490),(900,490),(903,490),(906,490),(909,490),(912,490),(915,490),(918,490),(921,490),(924,490),(927,490),(930,490),(933,490),(936,490),(939,490),(942,490),(945,490),(948,490),(951,490),(954,490),(957,490),(960,490),(963,490),(966,490),(966,490),(966,490),(966,490),(966,490),(966,490),(966,490),(966,490),(966,490),(966,490),(966,490),(966,490),(966,490),(966,490),(966,490),(966,490),(966,490),(969,490),(972,490),(975,490),(978,490),(981,490),(984,490),(987,490),(990,490),(993,490),(996,490),(999,490),(1002,490),(1005,490),(1008,487),(1011,484),(1014,481),(1017,478),(1020,475),(1023,472)]
                    self.path3v = [(10000,10000),(588,781),(591,778),(594,775),(597,772),(600,769),(603,766),(606,763),(609,760),(612,757),(615,754),(618,751),(621,748),(624,745),(627,742),(630,739),(633,736),(636,733),(639,730),(642,727),(645,724),(648,721),(651,718),(654,715),(657,712),(660,709),(663,706),(666,703),(669,700),(672,697),(675,694),(678,691),(681,688),(684,685),(687,682),(690,679),(693,676),(696,673),(699,670),(702,667),(705,664),(708,661),(711,658),(714,655),(717,652),(720,649),(723,646),(726,643),(729,640),(732,637),(735,634),(738,631),(741,628),(744,625),(747,622),(750,619),(753,616),(756,613),(759,610),(762,607),(765,604),(768,601),(771,598),(774,595),(777,592),(780,589),(783,586),(786,583),(789,580),(792,577),(795,574),(798,571),(801,568),(804,565),(807,562),(810,559),(813,556),(816,553),(819,550),(822,547),(825,544),(828,541),(831,538),(834,535),(837,532),(840,529),(843,526),(846,523),(849,520),(852,517),(855,514),(858,511),(861,508),(864,505),(867,502),(870,499),(873,496),(876,493),(879,490),(879,490),(879,490),(879,490),(882,490),(885,490),(888,490),(891,490),(894,490),(897,490),(900,490),(903,490),(906,490),(909,490),(912,490),(915,490),(918,490),(921,490),(924,490),(927,490),(930,490),(933,490),(936,490),(939,490),(942,490),(945,490),(948,490),(951,490),(954,490),(957,490),(960,490),(963,490),(966,490),(966,490),(966,490),(966,490),(966,490),(966,490),(966,490),(966,490),(966,490),(966,490),(966,490),(966,490),(966,490),(966,490),(966,490),(966,490),(966,490),(969,490),(972,490),(975,490),(978,490),(981,490),(984,490),(987,490),(990,490),(993,490),(996,490),(999,490),(1002,490),(1005,490),(1008,487),(1011,484),(1014,481),(1017,478),(1020,475),(1023,472),(1026,469),(1029,466),(1032,463),(1035,460),(1038,457),(1041,454),(1044,451),(1047,448),(1050,445),(1053,442),(1056,439),(1059,436),(1062,433),(1065,430),(1068,427),(1071,424),(1074,421),(1077,418),(1080,415),(1083,412),(1086,409),(1089,406),(1092,403),(1095,400),(1098,397),(1101,394),(1104,391)]
                    self.path2d = [(10000,10000),(588,781),(591,778),(594,775),(597,772),(600,769),(603,766),(606,763),(609,760),(612,757),(615,754),(618,751),(621,748),(624,745),(627,742),(630,739),(633,736),(636,733),(639,730),(642,727),(645,724),(648,721),(651,718),(654,715),(657,712),(660,709),(663,706),(666,703),(669,700),(672,697),(675,694),(678,691),(681,688),(684,685),(687,682),(690,679),(693,676)]
                    self.path3d = [(10000,10000),(588,781),(591,778),(594,775),(597,772),(600,769),(603,766)]

                    if not self.cont:
                        self.x = self.path[0][0]
                        self.y = self.path[0][1]
                        self.cont = 1
                elif self.posicion == 2:
                    print("2 mid")
                    self.path = [(10000,10000),(614,821),(617,818),(620,815),(623,812),(626,809),(629,806),(632,803),(635,800),(638,797),(641,794),(644,791),(647,788),(650,785),(653,782),(656,779),(659,776),(662,773),(665,770),(668,767),(671,764),(674,761),(677,758),(680,755),(683,752),(686,749),(689,746),(692,743),(695,740),(698,737),(701,734),(704,731),(707,728),(710,725),(713,722),(716,719),(719,716),(722,713),(725,710),(728,707),(731,704),(734,701),(737,698),(740,695),(743,692),(746,689),(749,686),(752,683),(755,680),(758,677),(761,674),(764,671),(767,668),(770,665),(773,662),(776,659),(779,656),(782,653),(785,650),(788,647),(791,644),(794,641),(797,638),(800,635),(803,632),(806,629),(809,626),(812,623),(815,620),(818,617),(821,614),(824,611),(827,608),(830,605),(830,605),(830,605),(830,605),(830,605),(830,605),(830,605),(830,605),(830,605),(830,605),(833,602),(836,599),(839,596),(842,593),(845,590),(848,587),(851,584),(854,581),(857,578),(860,575),(863,572),(866,569),(869,566),(872,563),(875,563),(878,563),(881,563),(884,563)]
                    self.path1 = [(10000,10000),(614,821),(617,818),(620,815),(623,812),(626,809),(629,806),(632,803),(635,800),(638,797),(641,794),(644,791),(647,788),(650,785),(653,782),(656,779),(659,776),(662,773),(665,770),(668,767),(671,764),(674,761),(677,758),(680,755),(683,752),(686,749),(689,746),(692,743),(695,740),(698,737),(701,734),(704,731),(707,728),(710,725),(713,722),(716,719),(719,716),(722,713),(725,710),(728,707),(731,704),(734,701),(737,698),(740,695),(743,692),(746,689),(749,686),(752,683),(755,680),(758,677),(761,674),(764,671),(767,668),(770,665),(773,662),(776,659),(779,656),(782,653),(785,650),(788,647),(791,644),(794,641),(797,638),(800,635),(803,632),(806,629),(809,626),(812,623),(815,620),(818,617),(821,614),(824,611),(827,608),(830,605),(830,605),(830,605),(830,605),(830,605),(830,605),(830,605),(830,605),(830,605),(830,605),(833,602),(836,599),(839,596),(842,593),(845,590),(848,587),(851,584),(854,581),(857,578),(860,575),(863,572),(866,569),(869,566),(872,563),(875,563),(878,563),(881,563),(884,563)]
                    self.path2v = [(10000,10000),(614,821),(617,818),(620,815),(623,812),(626,809),(629,806),(632,803),(635,800),(638,797),(641,794),(644,791),(647,788),(650,785),(653,782),(656,779),(659,776),(662,773),(665,770),(668,767),(671,764),(674,761),(677,758),(680,755),(683,752),(686,749),(689,746),(692,743),(695,740),(698,737),(701,734),(704,731),(707,728),(710,725),(713,722),(716,719),(719,716),(722,713),(725,710),(728,707),(731,704),(734,701),(737,698),(740,695),(743,692),(746,689),(749,686),(752,683),(755,680),(758,677),(761,674),(764,671),(767,668),(770,665),(773,662),(776,659),(779,656),(782,653),(785,650),(788,647),(791,644),(794,641),(797,638),(800,635),(803,632),(806,629),(809,626),(812,623),(815,620),(818,617),(821,614),(824,611),(827,608),(830,605),(830,605),(830,605),(830,605),(830,605),(830,605),(830,605),(830,605),(830,605),(830,605),(833,602),(836,599),(839,596),(842,593),(845,590),(848,587),(851,584),(854,581),(857,578),(860,575),(863,572),(866,569),(869,566),(872,563),(872,563),(872,563),(872,563),(875,563),(878,563),(881,563),(884,563),(887,563),(890,563),(893,563),(896,563),(899,563),(902,563),(905,563),(908,563),(911,563),(914,563),(917,563),(920,563),(923,563),(926,563),(929,563),(932,563),(935,563),(938,563),(941,563),(944,563),(947,563),(950,563),(953,563),(956,563),(959,563),(962,563),(965,563),(968,563),(971,563),(974,563),(977,563),(980,563),(983,563),(986,563),(989,563),(992,563),(995,563),(998,563),(1001,563),(1004,563),(1007,563),(1010,563),(1013,560),(1016,557),(1019,554),(1022,551),(1025,548),(1028,545),(1031,542),(1034,539),(1037,536),(1040,533),(1043,530),(1046,527),(1049,524),(1052,521),(1055,518),(1058,515),(1061,512),(1064,509),(1067,506),(1070,503)]
                    self.path3v = [(10000,10000),(614,821),(617,818),(620,815),(623,812),(626,809),(629,806),(632,803),(635,800),(638,797),(641,794),(644,791),(647,788),(650,785),(653,782),(656,779),(659,776),(662,773),(665,770),(668,767),(671,764),(674,761),(677,758),(680,755),(683,752),(686,749),(689,746),(692,743),(695,740),(698,737),(701,734),(704,731),(707,728),(710,725),(713,722),(716,719),(719,716),(722,713),(725,710),(728,707),(731,704),(734,701),(737,698),(740,695),(743,692),(746,689),(749,686),(752,683),(755,680),(758,677),(761,674),(764,671),(767,668),(770,665),(773,662),(776,659),(779,656),(782,653),(785,650),(788,647),(791,644),(794,641),(797,638),(800,635),(803,632),(806,629),(809,626),(812,623),(815,620),(818,617),(821,614),(824,611),(827,608),(830,605),(830,605),(830,605),(830,605),(830,605),(830,605),(830,605),(830,605),(830,605),(830,605),(833,602),(836,599),(839,596),(842,593),(845,590),(848,587),(851,584),(854,581),(857,578),(860,575),(863,572),(866,569),(869,566),(872,563),(872,563),(872,563),(872,563),(875,563),(878,563),(881,563),(884,563),(887,563),(890,563),(893,563),(896,563),(899,563),(902,563),(905,563),(908,563),(911,563),(914,563),(917,563),(920,563),(923,563),(926,563),(929,563),(932,563),(935,563),(938,563),(941,563),(944,563),(947,563),(950,563),(953,563),(956,563),(959,563),(962,563),(965,563),(968,563),(971,563),(974,563),(977,563),(980,563),(983,563),(986,563),(989,563),(992,563),(995,563),(998,563),(1001,563),(1004,563),(1007,563),(1010,563),(1013,560),(1016,557),(1019,554),(1022,551),(1025,548),(1028,545),(1031,542),(1034,539),(1037,536),(1040,533),(1043,530),(1046,527),(1049,524),(1052,521),(1055,518),(1058,515),(1061,512),(1064,509),(1067,506),(1070,503),(1073,500),(1076,497),(1079,494),(1082,491),(1085,488),(1088,485),(1091,482),(1094,479),(1097,476),(1100,473),(1103,470),(1106,467),(1109,464),(1112,461),(1115,458),(1118,455),(1121,452),(1124,449),(1127,446),(1130,443),(1133,440),(1136,437),(1139,434),(1142,431),(1145,428),(1148,425),(1151,422)]
                    self.path2d = [(10000,10000),(614,821),(617,818),(620,815),(623,812),(626,809),(629,806),(632,803),(635,800),(638,797),(641,794),(644,791),(647,788),(650,785),(653,782),(656,779),(659,776),(662,773),(665,770),(668,767),(671,764),(674,761),(677,758),(680,755),(683,752),(686,749),(689,746),(692,743),(695,740),(698,737),(701,734),(704,731),(707,728),(710,725),(713,722),(716,719),(719,716)]
                    self.path3d = [(10000,10000),(614,821),(617,818),(620,815),(623,812),(626,809),(629,806)]

                    if not self.cont:
                        self.x = self.path[0][0]
                        self.y = self.path[0][1]
                        self.cont = 1

                cursor.execute('SELECT estado FROM torres WHERE nombre = "torre_mid_1_derecha"')
                resul = cursor.fetchall()
                for r in resul:
                    self.torre_1_derecha = r[0]
                cursor.execute('SELECT estado FROM torres WHERE nombre = "torre_mid_2_derecha"')
                resul = cursor.fetchall()
                for r in resul:
                    self.torre_2_derecha = r[0]
                cursor.execute('SELECT estado FROM torres WHERE nombre = "torre_mid_1_izquierda"')
                resul = cursor.fetchall()
                for r in resul:
                    self.torre_1_izquierda = r[0]
                cursor.execute('SELECT estado FROM torres WHERE nombre = "torre_mid_2_izquierda"')
                resul = cursor.fetchall()
                for r in resul:
                    self.torre_2_izquierda = r[0]
            elif self.linea == 'bot':
                if self.posicion == 1:
                    print("1 bot")
                    self.path = [(10000,10000),(613,860),(616,860),(619,860),(622,860),(625,860),(628,860),(631,860),(634,860),(637,860),(640,860),(643,860),(646,860),(649,860),(652,860),(655,860),(658,860),(661,860),(664,860),(667,860),(670,860),(673,860),(676,860),(679,860),(682,860),(685,860),(688,860),(691,860),(694,860),(697,860),(700,860),(703,860),(706,860),(709,860),(712,860),(715,860),(718,860),(721,860),(724,860),(727,860),(730,860),(733,860),(736,860),(739,860),(742,860),(745,860),(748,860),(751,860),(754,860),(757,860),(760,860),(763,860),(766,860),(769,860),(772,860),(775,860),(778,860),(781,860),(784,860),(787,860),(790,860),(793,860),(796,860),(799,860),(802,860),(805,860),(808,860),(811,860),(814,860),(817,860),(820,860),(823,860),(826,860),(829,860),(832,860),(835,860),(838,860),(841,860),(844,860),(847,860),(850,860),(853,860),(856,860),(859,860),(862,860),(865,860),(868,860),(871,860),(874,860),(877,860),(880,860),(883,860),(886,860),(889,860),(892,860),(895,860),(898,860),(901,860),(904,860),(907,860),(910,860),(913,860),(916,860),(919,860),(922,860),(925,860),(928,860),(931,860),(934,860),(937,860),(940,860),(943,860),(946,860),(949,860),(952,860),(955,860),(958,860),(961,860),(964,860),(967,860),(970,860),(973,860),(976,860),(979,860),(982,860),(985,860),(988,860),(991,860),(994,860),(997,860),(1000,860),(1003,860),(1006,860),(1009,860),(1012,860),(1015,860),(1018,860),(1021,860),(1024,860),(1027,860),(1030,860),(1033,860),(1036,860),(1039,860),(1042,860),(1045,860),(1048,860),(1051,860),(1054,860),(1057,860),(1060,860),(1063,860),(1066,860),(1069,860),(1072,860),(1075,860),(1078,860),(1081,860),(1084,860),(1087,860),(1090,860),(1093,860),(1096,860),(1099,860),(1102,860),(1105,860),(1108,860),(1111,860),(1114,860),(1117,860),(1120,860),(1123,860),(1126,860),(1129,860),(1132,860),(1135,860),(1138,860),(1141,860),(1144,860),(1147,860),(1150,860),(1153,860),(1156,860),(1159,860),(1162,860),(1165,860),(1168,860),(1171,860),(1174,860),(1177,860),(1180,860),(1183,860),(1186,860),(1189,860),(1192,860),(1195,860),(1198,860),(1201,860),(1204,860),(1207,860),(1210,860),(1213,860),(1216,860),(1219,860),(1222,860),(1222,860),(1222,860),(1222,860),(1222,860),(1222,860),(1222,860),(1222,860),(1222,860),(1225,857),(1228,854)]
                    self.path1 = [(10000,10000),(613,860),(616,860),(619,860),(622,860),(625,860),(628,860),(631,860),(634,860),(637,860),(640,860),(643,860),(646,860),(649,860),(652,860),(655,860),(658,860),(661,860),(664,860),(667,860),(670,860),(673,860),(676,860),(679,860),(682,860),(685,860),(688,860),(691,860),(694,860),(697,860),(700,860),(703,860),(706,860),(709,860),(712,860),(715,860),(718,860),(721,860),(724,860),(727,860),(730,860),(733,860),(736,860),(739,860),(742,860),(745,860),(748,860),(751,860),(754,860),(757,860),(760,860),(763,860),(766,860),(769,860),(772,860),(775,860),(778,860),(781,860),(784,860),(787,860),(790,860),(793,860),(796,860),(799,860),(802,860),(805,860),(808,860),(811,860),(814,860),(817,860),(820,860),(823,860),(826,860),(829,860),(832,860),(835,860),(838,860),(841,860),(844,860),(847,860),(850,860),(853,860),(856,860),(859,860),(862,860),(865,860),(868,860),(871,860),(874,860),(877,860),(880,860),(883,860),(886,860),(889,860),(892,860),(895,860),(898,860),(901,860),(904,860),(907,860),(910,860),(913,860),(916,860),(919,860),(922,860),(925,860),(928,860),(931,860),(934,860),(937,860),(940,860),(943,860),(946,860),(949,860),(952,860),(955,860),(958,860),(961,860),(964,860),(967,860),(970,860),(973,860),(976,860),(979,860),(982,860),(985,860),(988,860),(991,860),(994,860),(997,860),(1000,860),(1003,860),(1006,860),(1009,860),(1012,860),(1015,860),(1018,860),(1021,860),(1024,860),(1027,860),(1030,860),(1033,860),(1036,860),(1039,860),(1042,860),(1045,860),(1048,860),(1051,860),(1054,860),(1057,860),(1060,860),(1063,860),(1066,860),(1069,860),(1072,860),(1075,860),(1078,860),(1081,860),(1084,860),(1087,860),(1090,860),(1093,860),(1096,860),(1099,860),(1102,860),(1105,860),(1108,860),(1111,860),(1114,860),(1117,860),(1120,860),(1123,860),(1126,860),(1129,860),(1132,860),(1135,860),(1138,860),(1141,860),(1144,860),(1147,860),(1150,860),(1153,860),(1156,860),(1159,860),(1162,860),(1165,860),(1168,860),(1171,860),(1174,860),(1177,860),(1180,860),(1183,860),(1186,860),(1189,860),(1192,860),(1195,860),(1198,860),(1201,860),(1204,860),(1207,860),(1210,860),(1213,860),(1216,860),(1219,860),(1222,860),(1222,860),(1222,860),(1222,860),(1222,860),(1222,860),(1222,860),(1222,860),(1222,860),(1225,857),(1228,854)]
                    self.path2v = [(10000,10000),(613,860),(616,860),(619,860),(622,860),(625,860),(628,860),(631,860),(634,860),(637,860),(640,860),(643,860),(646,860),(649,860),(652,860),(655,860),(658,860),(661,860),(664,860),(667,860),(670,860),(673,860),(676,860),(679,860),(682,860),(685,860),(688,860),(691,860),(694,860),(697,860),(700,860),(703,860),(706,860),(709,860),(712,860),(715,860),(718,860),(721,860),(724,860),(727,860),(730,860),(733,860),(736,860),(739,860),(742,860),(745,860),(748,860),(751,860),(754,860),(757,860),(760,860),(763,860),(766,860),(769,860),(772,860),(775,860),(778,860),(781,860),(784,860),(787,860),(790,860),(793,860),(796,860),(799,860),(802,860),(805,860),(808,860),(811,860),(814,860),(817,860),(820,860),(823,860),(826,860),(829,860),(832,860),(835,860),(838,860),(841,860),(844,860),(847,860),(850,860),(853,860),(856,860),(859,860),(862,860),(865,860),(868,860),(871,860),(874,860),(877,860),(880,860),(883,860),(886,860),(889,860),(892,860),(895,860),(898,860),(901,860),(904,860),(907,860),(910,860),(913,860),(916,860),(919,860),(922,860),(925,860),(928,860),(931,860),(934,860),(937,860),(940,860),(943,860),(946,860),(949,860),(952,860),(955,860),(958,860),(961,860),(964,860),(967,860),(970,860),(973,860),(976,860),(979,860),(982,860),(985,860),(988,860),(991,860),(994,860),(997,860),(1000,860),(1003,860),(1006,860),(1009,860),(1012,860),(1015,860),(1018,860),(1021,860),(1024,860),(1027,860),(1030,860),(1033,860),(1036,860),(1039,860),(1042,860),(1045,860),(1048,860),(1051,860),(1054,860),(1057,860),(1060,860),(1063,860),(1066,860),(1069,860),(1072,860),(1075,860),(1078,860),(1081,860),(1084,860),(1087,860),(1090,860),(1093,860),(1096,860),(1099,860),(1102,860),(1105,860),(1108,860),(1111,860),(1114,860),(1117,860),(1120,860),(1123,860),(1126,860),(1129,860),(1132,860),(1135,860),(1138,860),(1141,860),(1144,860),(1147,860),(1150,860),(1153,860),(1156,860),(1159,860),(1162,860),(1165,860),(1168,860),(1171,860),(1174,860),(1177,860),(1180,860),(1183,860),(1186,860),(1189,860),(1192,860),(1195,860),(1198,860),(1201,860),(1204,860),(1207,860),(1210,860),(1213,860),(1216,860),(1219,860),(1222,860),(1222,860),(1222,860),(1222,860),(1222,860),(1222,860),(1222,860),(1222,860),(1222,860),(1225,857),(1228,854),(1231,851),(1234,848),(1237,845),(1240,842),(1243,839),(1246,836),(1249,833),(1252,830),(1255,827),(1258,824),(1261,821),(1264,818),(1267,815),(1270,812),(1273,809),(1276,806),(1279,803),(1282,800),(1285,797),(1288,794),(1291,791),(1294,788),(1297,785),(1300,782),(1303,779),(1306,776),(1309,773),(1312,770),(1315,767),(1318,764),(1321,761),(1324,758),(1327,755),(1330,752),(1333,749),(1336,746),(1339,743),(1342,740),(1345,737),(1348,734),(1348,734),(1348,734),(1348,734),(1348,734),(1348,734),(1348,734),(1348,734),(1348,734),(1348,734),(1348,734),(1348,731),(1348,728),(1348,725),(1348,722),(1348,719),(1348,716),(1348,713),(1348,710),(1348,707),(1348,704),(1348,701),(1348,698),(1348,695),(1348,692),(1348,689),(1348,686),(1348,683),(1348,680),(1348,677),(1348,674),(1348,671),(1348,668),(1348,665),(1348,662),(1348,659),(1348,656),(1348,653),(1348,650),(1348,647),(1348,644),(1348,641),(1348,638),(1348,635),(1348,632)]
                    self.path3v = [(10000,10000),(613,860),(616,860),(619,860),(622,860),(625,860),(628,860),(631,860),(634,860),(637,860),(640,860),(643,860),(646,860),(649,860),(652,860),(655,860),(658,860),(661,860),(664,860),(667,860),(670,860),(673,860),(676,860),(679,860),(682,860),(685,860),(688,860),(691,860),(694,860),(697,860),(700,860),(703,860),(706,860),(709,860),(712,860),(715,860),(718,860),(721,860),(724,860),(727,860),(730,860),(733,860),(736,860),(739,860),(742,860),(745,860),(748,860),(751,860),(754,860),(757,860),(760,860),(763,860),(766,860),(769,860),(772,860),(775,860),(778,860),(781,860),(784,860),(787,860),(790,860),(793,860),(796,860),(799,860),(802,860),(805,860),(808,860),(811,860),(814,860),(817,860),(820,860),(823,860),(826,860),(829,860),(832,860),(835,860),(838,860),(841,860),(844,860),(847,860),(850,860),(853,860),(856,860),(859,860),(862,860),(865,860),(868,860),(871,860),(874,860),(877,860),(880,860),(883,860),(886,860),(889,860),(892,860),(895,860),(898,860),(901,860),(904,860),(907,860),(910,860),(913,860),(916,860),(919,860),(922,860),(925,860),(928,860),(931,860),(934,860),(937,860),(940,860),(943,860),(946,860),(949,860),(952,860),(955,860),(958,860),(961,860),(964,860),(967,860),(970,860),(973,860),(976,860),(979,860),(982,860),(985,860),(988,860),(991,860),(994,860),(997,860),(1000,860),(1003,860),(1006,860),(1009,860),(1012,860),(1015,860),(1018,860),(1021,860),(1024,860),(1027,860),(1030,860),(1033,860),(1036,860),(1039,860),(1042,860),(1045,860),(1048,860),(1051,860),(1054,860),(1057,860),(1060,860),(1063,860),(1066,860),(1069,860),(1072,860),(1075,860),(1078,860),(1081,860),(1084,860),(1087,860),(1090,860),(1093,860),(1096,860),(1099,860),(1102,860),(1105,860),(1108,860),(1111,860),(1114,860),(1117,860),(1120,860),(1123,860),(1126,860),(1129,860),(1132,860),(1135,860),(1138,860),(1141,860),(1144,860),(1147,860),(1150,860),(1153,860),(1156,860),(1159,860),(1162,860),(1165,860),(1168,860),(1171,860),(1174,860),(1177,860),(1180,860),(1183,860),(1186,860),(1189,860),(1192,860),(1195,860),(1198,860),(1201,860),(1204,860),(1207,860),(1210,860),(1213,860),(1216,860),(1219,860),(1222,860),(1222,860),(1222,860),(1222,860),(1222,860),(1222,860),(1222,860),(1222,860),(1222,860),(1225,857),(1228,854),(1231,851),(1234,848),(1237,845),(1240,842),(1243,839),(1246,836),(1249,833),(1252,830),(1255,827),(1258,824),(1261,821),(1264,818),(1267,815),(1270,812),(1273,809),(1276,806),(1279,803),(1282,800),(1285,797),(1288,794),(1291,791),(1294,788),(1297,785),(1300,782),(1303,779),(1306,776),(1309,773),(1312,770),(1315,767),(1318,764),(1321,761),(1324,758),(1327,755),(1330,752),(1333,749),(1336,746),(1339,743),(1342,740),(1345,737),(1348,734),(1348,734),(1348,734),(1348,734),(1348,734),(1348,734),(1348,734),(1348,734),(1348,734),(1348,734),(1348,734),(1348,731),(1348,728),(1348,725),(1348,722),(1348,719),(1348,716),(1348,713),(1348,710),(1348,707),(1348,704),(1348,701),(1348,698),(1348,695),(1348,692),(1348,689),(1348,686),(1348,683),(1348,680),(1348,677),(1348,674),(1348,671),(1348,668),(1348,665),(1348,662),(1348,659),(1348,656),(1348,653),(1348,650),(1348,647),(1348,644),(1348,641),(1348,638),(1348,635),(1348,632),(1348,629),(1348,626),(1348,623),(1348,620),(1348,617),(1348,614),(1348,611),(1348,608),(1348,605),(1348,602),(1348,599),(1348,596),(1348,593),(1348,590),(1348,587),(1348,584),(1348,581),(1348,578),(1348,575),(1348,572),(1348,569),(1348,566),(1348,563),(1348,560),(1348,557),(1348,554),(1348,551),(1348,548),(1348,545),(1348,542),(1348,539),(1348,536),(1348,533),(1348,530),(1348,527),(1348,524),(1348,521),(1348,518),(1348,515),(1348,512),(1348,509),(1348,506),(1348,503),(1348,500),(1348,497),(1348,494),(1348,491),(1348,488),(1348,485),(1348,482),(1348,479),(1348,476),(1348,473),(1348,470),(1348,467),(1348,464),(1348,461)]
                    self.path2d = [(10000,10000),(613,860),(616,860),(619,860),(622,860),(625,860),(628,860),(631,860),(634,860),(637,860),(640,860),(643,860),(646,860),(649,860),(652,860),(655,860),(658,860),(661,860),(664,860),(667,860),(670,860),(673,860),(676,860),(679,860),(682,860),(685,860),(688,860),(691,860),(694,860),(697,860),(700,860),(703,860),(706,860),(709,860),(712,860),(715,860),(718,860),(721,860),(724,860),(727,860),(730,860),(733,860),(736,860),(739,860),(742,860),(745,860),(748,860),(751,860),(754,860),(757,860),(760,860),(763,860),(766,860),(769,860),(772,860),(775,860),(778,860),(781,860),(784,860),(787,860),(790,860),(793,860),(796,860),(799,860),(802,860),(805,860),(808,860),(811,860),(814,860),(817,860),(820,860),(823,860),(826,860),(829,860),(832,860),(835,860),(838,860),(841,860),(844,860),(847,860)]
                    self.path3d = [(10000,10000),(613,860),(616,860),(619,860),(622,860),(625,860),(628,860),(631,860),(634,860),(637,860)]

                    if not self.cont:
                        self.x = self.path[0][0]
                        self.y = self.path[0][1]
                        self.cont = 1
                elif self.posicion == 2:
                    print("2 bot")
                    self.path = [(10000,10000),(613,910),(616,910),(619,910),(622,910),(625,910),(628,910),(631,910),(634,910),(637,910),(640,910),(643,910),(646,910),(649,910),(652,910),(655,910),(658,910),(661,910),(664,910),(667,910),(670,910),(673,910),(676,910),(679,910),(682,910),(685,910),(688,910),(691,910),(694,910),(697,910),(700,910),(703,910),(706,910),(709,910),(712,910),(715,910),(718,910),(721,910),(724,910),(727,910),(730,910),(733,910),(736,910),(739,910),(742,910),(745,910),(748,910),(751,910),(754,910),(757,910),(760,910),(763,910),(766,910),(769,910),(772,910),(775,910),(778,910),(781,910),(784,910),(787,910),(790,910),(793,910),(796,910),(799,910),(802,910),(805,910),(808,910),(811,910),(814,910),(817,910),(820,910),(823,910),(826,910),(829,910),(832,910),(835,910),(838,910),(841,910),(844,910),(847,910),(850,910),(853,910),(856,910),(859,910),(862,910),(865,910),(868,910),(871,910),(874,910),(877,910),(880,910),(883,910),(886,910),(889,910),(892,910),(895,910),(898,910),(901,910),(904,910),(907,910),(910,910),(913,910),(916,910),(919,910),(922,910),(925,910),(928,910),(931,910),(934,910),(937,910),(940,910),(943,910),(946,910),(949,910),(952,910),(955,910),(958,910),(961,910),(964,910),(967,910),(970,910),(973,910),(976,910),(979,910),(982,910),(985,910),(988,910),(991,910),(994,910),(997,910),(1000,910),(1003,910),(1006,910),(1009,910),(1012,910),(1015,910),(1018,910),(1021,910),(1024,910),(1027,910),(1030,910),(1033,910),(1036,910),(1039,910),(1042,910),(1045,910),(1048,910),(1051,910),(1054,910),(1057,910),(1060,910),(1063,910),(1066,910),(1069,910),(1072,910),(1075,910),(1078,910),(1081,910),(1084,910),(1087,910),(1090,910),(1093,910),(1096,910),(1099,910),(1102,910),(1105,910),(1108,910),(1111,910),(1114,910),(1117,910),(1120,910),(1123,910),(1126,910),(1129,910),(1132,910),(1135,910),(1138,910),(1141,910),(1144,910),(1147,910),(1150,910),(1153,910),(1156,910),(1159,910),(1162,910),(1165,910),(1168,910),(1171,910),(1174,910),(1177,910),(1180,910),(1183,910),(1186,910),(1189,910),(1192,910),(1195,910),(1198,910),(1201,910),(1204,910),(1207,910),(1210,910),(1213,910),(1216,910),(1219,910),(1222,910),(1225,907),(1228,904),(1231,901),(1234,898),(1237,895),(1240,892),(1243,889),(1246,886),(1249,883),(1252,880)]
                    self.path1 = [(10000,10000),(613,910),(616,910),(619,910),(622,910),(625,910),(628,910),(631,910),(634,910),(637,910),(640,910),(643,910),(646,910),(649,910),(652,910),(655,910),(658,910),(661,910),(664,910),(667,910),(670,910),(673,910),(676,910),(679,910),(682,910),(685,910),(688,910),(691,910),(694,910),(697,910),(700,910),(703,910),(706,910),(709,910),(712,910),(715,910),(718,910),(721,910),(724,910),(727,910),(730,910),(733,910),(736,910),(739,910),(742,910),(745,910),(748,910),(751,910),(754,910),(757,910),(760,910),(763,910),(766,910),(769,910),(772,910),(775,910),(778,910),(781,910),(784,910),(787,910),(790,910),(793,910),(796,910),(799,910),(802,910),(805,910),(808,910),(811,910),(814,910),(817,910),(820,910),(823,910),(826,910),(829,910),(832,910),(835,910),(838,910),(841,910),(844,910),(847,910),(850,910),(853,910),(856,910),(859,910),(862,910),(865,910),(868,910),(871,910),(874,910),(877,910),(880,910),(883,910),(886,910),(889,910),(892,910),(895,910),(898,910),(901,910),(904,910),(907,910),(910,910),(913,910),(916,910),(919,910),(922,910),(925,910),(928,910),(931,910),(934,910),(937,910),(940,910),(943,910),(946,910),(949,910),(952,910),(955,910),(958,910),(961,910),(964,910),(967,910),(970,910),(973,910),(976,910),(979,910),(982,910),(985,910),(988,910),(991,910),(994,910),(997,910),(1000,910),(1003,910),(1006,910),(1009,910),(1012,910),(1015,910),(1018,910),(1021,910),(1024,910),(1027,910),(1030,910),(1033,910),(1036,910),(1039,910),(1042,910),(1045,910),(1048,910),(1051,910),(1054,910),(1057,910),(1060,910),(1063,910),(1066,910),(1069,910),(1072,910),(1075,910),(1078,910),(1081,910),(1084,910),(1087,910),(1090,910),(1093,910),(1096,910),(1099,910),(1102,910),(1105,910),(1108,910),(1111,910),(1114,910),(1117,910),(1120,910),(1123,910),(1126,910),(1129,910),(1132,910),(1135,910),(1138,910),(1141,910),(1144,910),(1147,910),(1150,910),(1153,910),(1156,910),(1159,910),(1162,910),(1165,910),(1168,910),(1171,910),(1174,910),(1177,910),(1180,910),(1183,910),(1186,910),(1189,910),(1192,910),(1195,910),(1198,910),(1201,910),(1204,910),(1207,910),(1210,910),(1213,910),(1216,910),(1219,910),(1222,910),(1225,907),(1228,904),(1231,901),(1234,898),(1237,895),(1240,892),(1243,889),(1246,886),(1249,883),(1252,880)]
                    self.path2v = [(10000,10000),(613,910),(616,910),(619,910),(622,910),(625,910),(628,910),(631,910),(634,910),(637,910),(640,910),(643,910),(646,910),(649,910),(652,910),(655,910),(658,910),(661,910),(664,910),(667,910),(670,910),(673,910),(676,910),(679,910),(682,910),(685,910),(688,910),(691,910),(694,910),(697,910),(700,910),(703,910),(706,910),(709,910),(712,910),(715,910),(718,910),(721,910),(724,910),(727,910),(730,910),(733,910),(736,910),(739,910),(742,910),(745,910),(748,910),(751,910),(754,910),(757,910),(760,910),(763,910),(766,910),(769,910),(772,910),(775,910),(778,910),(781,910),(784,910),(787,910),(790,910),(793,910),(796,910),(799,910),(802,910),(805,910),(808,910),(811,910),(814,910),(817,910),(820,910),(823,910),(826,910),(829,910),(832,910),(835,910),(838,910),(841,910),(844,910),(847,910),(850,910),(853,910),(856,910),(859,910),(862,910),(865,910),(868,910),(871,910),(874,910),(877,910),(880,910),(883,910),(886,910),(889,910),(892,910),(895,910),(898,910),(901,910),(904,910),(907,910),(910,910),(913,910),(916,910),(919,910),(922,910),(925,910),(928,910),(931,910),(934,910),(937,910),(940,910),(943,910),(946,910),(949,910),(952,910),(955,910),(958,910),(961,910),(964,910),(967,910),(970,910),(973,910),(976,910),(979,910),(982,910),(985,910),(988,910),(991,910),(994,910),(997,910),(1000,910),(1003,910),(1006,910),(1009,910),(1012,910),(1015,910),(1018,910),(1021,910),(1024,910),(1027,910),(1030,910),(1033,910),(1036,910),(1039,910),(1042,910),(1045,910),(1048,910),(1051,910),(1054,910),(1057,910),(1060,910),(1063,910),(1066,910),(1069,910),(1072,910),(1075,910),(1078,910),(1081,910),(1084,910),(1087,910),(1090,910),(1093,910),(1096,910),(1099,910),(1102,910),(1105,910),(1108,910),(1111,910),(1114,910),(1117,910),(1120,910),(1123,910),(1126,910),(1129,910),(1132,910),(1135,910),(1138,910),(1141,910),(1144,910),(1147,910),(1150,910),(1153,910),(1156,910),(1159,910),(1162,910),(1165,910),(1168,910),(1171,910),(1174,910),(1177,910),(1180,910),(1183,910),(1186,910),(1189,910),(1192,910),(1195,910),(1198,910),(1201,910),(1204,910),(1207,910),(1210,910),(1213,910),(1216,910),(1219,910),(1222,910),(1225,907),(1228,904),(1231,901),(1234,898),(1237,895),(1240,892),(1243,889),(1246,886),(1249,883),(1252,880),(1255,877),(1258,874),(1261,871),(1264,868),(1267,865),(1270,862),(1273,859),(1276,856),(1279,853),(1282,850),(1285,847),(1288,844),(1291,841),(1294,838),(1297,835),(1300,832),(1303,829),(1306,826),(1309,823),(1312,820),(1315,817),(1318,814),(1321,811),(1324,808),(1327,805),(1330,802),(1333,799),(1336,796),(1339,793),(1342,790),(1345,787),(1348,784),(1351,781),(1354,778),(1357,775),(1360,772),(1363,769),(1366,766),(1369,763),(1372,760),(1375,757),(1378,754),(1381,751),(1384,748),(1387,745),(1390,742),(1393,739),(1396,736),(1399,733),(1399,730),(1399,727),(1399,724),(1399,721),(1399,718),(1399,715),(1399,712),(1399,709),(1399,706),(1399,703),(1399,700),(1399,697),(1399,694),(1399,691),(1399,688),(1399,685),(1399,682),(1399,679),(1399,676),(1399,673),(1399,670),(1399,667),(1399,664),(1399,661),(1399,658),(1399,655),(1399,652),(1399,649),(1399,646),(1399,643),(1399,640),(1399,637),(1399,634),(1399,631)]
                    self.path3v = [(10000,10000),(613,910),(616,910),(619,910),(622,910),(625,910),(628,910),(631,910),(634,910),(637,910),(640,910),(643,910),(646,910),(649,910),(652,910),(655,910),(658,910),(661,910),(664,910),(667,910),(670,910),(673,910),(676,910),(679,910),(682,910),(685,910),(688,910),(691,910),(694,910),(697,910),(700,910),(703,910),(706,910),(709,910),(712,910),(715,910),(718,910),(721,910),(724,910),(727,910),(730,910),(733,910),(736,910),(739,910),(742,910),(745,910),(748,910),(751,910),(754,910),(757,910),(760,910),(763,910),(766,910),(769,910),(772,910),(775,910),(778,910),(781,910),(784,910),(787,910),(790,910),(793,910),(796,910),(799,910),(802,910),(805,910),(808,910),(811,910),(814,910),(817,910),(820,910),(823,910),(826,910),(829,910),(832,910),(835,910),(838,910),(841,910),(844,910),(847,910),(850,910),(853,910),(856,910),(859,910),(862,910),(865,910),(868,910),(871,910),(874,910),(877,910),(880,910),(883,910),(886,910),(889,910),(892,910),(895,910),(898,910),(901,910),(904,910),(907,910),(910,910),(913,910),(916,910),(919,910),(922,910),(925,910),(928,910),(931,910),(934,910),(937,910),(940,910),(943,910),(946,910),(949,910),(952,910),(955,910),(958,910),(961,910),(964,910),(967,910),(970,910),(973,910),(976,910),(979,910),(982,910),(985,910),(988,910),(991,910),(994,910),(997,910),(1000,910),(1003,910),(1006,910),(1009,910),(1012,910),(1015,910),(1018,910),(1021,910),(1024,910),(1027,910),(1030,910),(1033,910),(1036,910),(1039,910),(1042,910),(1045,910),(1048,910),(1051,910),(1054,910),(1057,910),(1060,910),(1063,910),(1066,910),(1069,910),(1072,910),(1075,910),(1078,910),(1081,910),(1084,910),(1087,910),(1090,910),(1093,910),(1096,910),(1099,910),(1102,910),(1105,910),(1108,910),(1111,910),(1114,910),(1117,910),(1120,910),(1123,910),(1126,910),(1129,910),(1132,910),(1135,910),(1138,910),(1141,910),(1144,910),(1147,910),(1150,910),(1153,910),(1156,910),(1159,910),(1162,910),(1165,910),(1168,910),(1171,910),(1174,910),(1177,910),(1180,910),(1183,910),(1186,910),(1189,910),(1192,910),(1195,910),(1198,910),(1201,910),(1204,910),(1207,910),(1210,910),(1213,910),(1216,910),(1219,910),(1222,910),(1225,907),(1228,904),(1231,901),(1234,898),(1237,895),(1240,892),(1243,889),(1246,886),(1249,883),(1252,880),(1255,877),(1258,874),(1261,871),(1264,868),(1267,865),(1270,862),(1273,859),(1276,856),(1279,853),(1282,850),(1285,847),(1288,844),(1291,841),(1294,838),(1297,835),(1300,832),(1303,829),(1306,826),(1309,823),(1312,820),(1315,817),(1318,814),(1321,811),(1324,808),(1327,805),(1330,802),(1333,799),(1336,796),(1339,793),(1342,790),(1345,787),(1348,784),(1351,781),(1354,778),(1357,775),(1360,772),(1363,769),(1366,766),(1369,763),(1372,760),(1375,757),(1378,754),(1381,751),(1384,748),(1387,745),(1390,742),(1393,739),(1396,736),(1399,733),(1399,730),(1399,727),(1399,724),(1399,721),(1399,718),(1399,715),(1399,712),(1399,709),(1399,706),(1399,703),(1399,700),(1399,697),(1399,694),(1399,691),(1399,688),(1399,685),(1399,682),(1399,679),(1399,676),(1399,673),(1399,670),(1399,667),(1399,664),(1399,661),(1399,658),(1399,655),(1399,652),(1399,649),(1399,646),(1399,643),(1399,640),(1399,637),(1399,634),(1399,631),(1399,628),(1399,625),(1399,622),(1399,619),(1399,616),(1399,613),(1399,610),(1399,607),(1399,604),(1399,601),(1399,598),(1399,595),(1399,592),(1399,589),(1399,586),(1399,583),(1399,580),(1399,577),(1399,574),(1399,571),(1399,568),(1399,565),(1399,562),(1399,559),(1399,556),(1399,553),(1399,550),(1399,547),(1399,544),(1399,541),(1399,538),(1399,535),(1399,532),(1399,529),(1399,526),(1399,523),(1399,520),(1399,517),(1399,514),(1399,511),(1399,508),(1399,505),(1399,502),(1399,499),(1399,496),(1399,493),(1399,490),(1399,487),(1399,484),(1399,481),(1399,478),(1399,475),(1399,472),(1399,469),(1399,466),(1399,463),(1399,460)]
                    self.path2d = [(10000,10000),(613,910),(616,910),(619,910),(622,910),(625,910),(628,910),(631,910),(634,910),(637,910),(640,910),(643,910),(646,910),(649,910),(652,910),(655,910),(658,910),(661,910),(664,910),(667,910),(670,910),(673,910),(676,910),(679,910),(682,910),(685,910),(688,910),(691,910),(694,910),(697,910),(700,910),(703,910),(706,910),(709,910),(712,910),(715,910),(718,910),(721,910),(724,910),(727,910),(730,910),(733,910),(736,910),(739,910),(742,910),(745,910),(748,910),(751,910),(754,910),(757,910),(760,910),(763,910),(766,910),(769,910),(772,910),(775,910),(778,910),(781,910),(784,910),(787,910),(790,910),(793,910),(796,910),(799,910),(802,910),(805,910),(808,910),(811,910),(814,910),(817,910),(820,910),(823,910),(826,910),(829,910),(832,910),(835,910),(838,910),(841,910),(844,910),(847,910)]
                    self.path3d = [(10000,10000),(613,910),(616,910),(619,910),(622,910),(625,910),(628,910),(631,910),(634,910),(637,910)]

                    if not self.cont:
                        self.x = self.path[0][0]
                        self.y = self.path[0][1]
                        self.cont = 1

                cursor.execute('SELECT estado FROM torres WHERE nombre = "torre_bot_1_derecha"')
                resul = cursor.fetchall()
                for r in resul:
                    self.torre_1_derecha = r[0]
                cursor.execute('SELECT estado FROM torres WHERE nombre = "torre_bot_2_derecha"')
                resul = cursor.fetchall()
                for r in resul:
                    self.torre_2_derecha = r[0]
                cursor.execute('SELECT estado FROM torres WHERE nombre = "torre_bot_1_izquierda"')
                resul = cursor.fetchall()
                for r in resul:
                    self.torre_1_izquierda = r[0]
                cursor.execute('SELECT estado FROM torres WHERE nombre = "torre_bot_2_izquierda"')
                resul = cursor.fetchall()
                for r in resul:
                    self.torre_2_izquierda = r[0]
            elif self.linea == "":
                self.path = [(10000, 10000)]
                self.path1 = [(10000, 10000)]
                self.path2v = [(10000, 10000)]
                self.path2d = [(10000, 10000)]
                self.path3v = [(10000, 10000)]
                self.path3d = [(10000, 10000)]
            conexion.close()

            """#CAMBIAR - Esto va fuera es para poder manipular el estado de las torres
            self.torre_1_derecha = 1
            self.torre_2_derecha = 1
            self.torre_1_izquierda = 1
            self.torre_2_izquierda = 1
            #-------"""

            fase1 = 0
            if self.torre_1_derecha and self.torre_2_derecha and self.torre_1_izquierda and self.torre_2_izquierda:
                fase1 = 1
            elif not self.torre_1_derecha and self.torre_2_derecha and not self.torre_1_izquierda and self.torre_2_izquierda:
                fase1 = 1
            elif not self.torre_1_derecha and not self.torre_2_derecha and not self.torre_1_izquierda and not self.torre_2_izquierda:
                fase1 = 1

            fase3v = 0
            if not self.torre_1_derecha and not self.torre_2_derecha and self.torre_1_izquierda and self.torre_2_izquierda:
                fase3v = 1
            elif not self.torre_1_derecha and not self.torre_2_derecha and not self.torre_1_izquierda and self.torre_2_izquierda:
                fase3v = 1

            fase3d = 0
            if self.torre_1_derecha and self.torre_2_derecha and not self.torre_1_izquierda and not self.torre_2_izquierda:
                fase3d = 1
            elif not self.torre_1_derecha and self.torre_2_derecha and not self.torre_1_izquierda and not self.torre_2_izquierda:
                fase3d = 1

            #SELECCIONAR LAS IMAGENES SEGUN EL ESTADO DE LA PARTIDA
            if fase1:
                print("FASE 1")
                if self.linea == "top":
                    if self.posicion == 1:
                        print("1 top")
                        # SELECCIONADOR DE IMAGENES EN FASE 1
                        if self.x == 502 and self.y == 279:
                            self.img = self.imgs4[self.contador_animacion]
                        else:
                            if self.x >= 496 and self.y <= 294:
                                self.img = self.imgs[self.contador_animacion]
                            else:
                                self.img = self.imgs2[self.contador_animacion]
                    elif self.posicion == 2:
                        print("2 top")
                        # SELECCIONADOR DE IMAGENES EN FASE 1
                        if self.x == 535 and self.y == 318 or self.x == 541 and self.y == 312:
                            self.img = self.imgs4[self.contador_animacion]
                        else:
                            if self.x >= 507 and self.y <= 315:
                                self.img = self.imgs[self.contador_animacion]
                            else:
                                self.img = self.imgs2[self.contador_animacion]
                elif self.linea == "mid":
                    if self.posicion == 1:
                        print("1 mid")
                        # SELECCIONADOR DE IMAGENES EN FASE 1
                        if self.x == 885 and self.y == 490:
                            self.img = self.imgs4[self.contador_animacion]
                        else:
                            self.img = self.imgs[self.contador_animacion]
                    elif self.posicion == 2:
                        print("2 mid")
                        # SELECCIONADOR DE IMAGENES EN FASE 1
                        if self.x == 830 and self.y == 605 or self.x == 884 and self.y == 563:
                            self.img = self.imgs4[self.contador_animacion]
                        else:
                            self.img = self.imgs[self.contador_animacion]
                elif self.linea == "bot":
                    if self.posicion == 1:
                        print("1 bot")
                        # SELECCIONADOR DE IMAGENES EN FASE 1
                        if self.x == 1222 and self.y == 860 or self.x == 1228 and self.y == 854:
                            self.img = self.imgs4[self.contador_animacion]
                        else:
                                self.img = self.imgs[self.contador_animacion]
                            # SIRVE QUE EL MINION GIRE CUANDO LLEGUE A LA CURVA
                    elif self.posicion == 2:
                        print("2 bot")
                        # SELECCIONADOR DE IMAGENES EN FASE 1
                        if self.x == 1252 and self.y == 880:
                            self.img = self.imgs4[self.contador_animacion]
                        else:
                            self.img = self.imgs[self.contador_animacion]
                            # SIRVE QUE EL MINION GIRE CUANDO LLEGUE A LA CURVA
            elif self.torre_1_derecha and self.torre_2_derecha and not self.torre_1_izquierda and self.torre_2_izquierda:
                print("FASE 2D")
                if self.linea == "top":
                    if self.posicion == 1:
                        print("1 top")
                        # SELECCIONADOR DE IMAGENES EN FASE 2 DERROTA
                        if self.x == 493 and self.y == 645:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            self.img = self.imgs2[self.contador_animacion]
                    elif self.posicion == 2:
                        print("2 top")
                        # SELECCIONADOR DE IMAGENES EN FASE 2 DERROTA
                        if self.x == 535 and self.y == 645:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            self.img = self.imgs2[self.contador_animacion]
                elif self.linea == "mid":
                    if self.posicion == 1:
                        print("1 mid")
                        # SELECCIONADOR DE IMAGENES EN FASE 2 DERROTA
                        if self.x == 693 and self.y == 676:
                            self.img = self.imgs4[self.contador_animacion]
                        else:
                            self.img = self.imgs[self.contador_animacion]
                    elif self.posicion == 2:
                        print("2 mid")
                        # SELECCIONADOR DE IMAGENES EN FASE 2 DERROTA
                        if self.x == 719 and self.y == 716:
                            self.img = self.imgs4[self.contador_animacion]
                        else:
                            self.img = self.imgs[self.contador_animacion]
                elif self.linea == "bot":
                    if self.posicion == 1:
                        print("1 bot")
                        # SELECCIONADOR DE IMAGENES EN FASE 2 DERROTA
                        if self.x == 847 and self.y == 860:
                            self.img = self.imgs4[self.contador_animacion]
                        else:
                            self.img = self.imgs[self.contador_animacion]
                    elif self.posicion == 2:
                        print("2 bot")
                        # SELECCIONADOR DE IMAGENES EN FASE 2 DERROTA
                        if self.x == 847 and self.y == 910:
                            self.img = self.imgs4[self.contador_animacion]
                        else:
                            self.img = self.imgs[self.contador_animacion]
            elif fase3d:
                print("FASE 3D")
                if self.linea == "top":
                    if self.posicion == 1:
                        print("1 top")
                        # SELECCIONADOR DE IMAGENES EN FASE 3 DERROTA
                        if self.x == 493 and self.y == 753:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            self.img = self.imgs2[self.contador_animacion]
                    elif self.posicion == 2:
                        print("2 top")
                        # SELECCIONADOR DE IMAGENES EN FASE 3 DERROTA
                        if self.x == 535 and self.y == 753:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            self.img = self.imgs2[self.contador_animacion]
                elif self.linea == "mid":
                    if self.posicion == 1:
                        print("1 mid")
                        # SELECCIONADOR DE IMAGENES EN FASE 3 DERROTA
                        if self.x == 603 and self.y == 766:
                            self.img = self.imgs4[self.contador_animacion]
                        else:
                            self.img = self.imgs[self.contador_animacion]
                    elif self.posicion == 2:
                        print("2 mid")
                        # SELECCIONADOR DE IMAGENES EN FASE 3 DERROTA
                        if self.x == 629 and self.y == 806:
                            self.img = self.imgs4[self.contador_animacion]
                        else:
                            self.img = self.imgs[self.contador_animacion]
                elif self.linea == "bot":
                    if self.posicion == 1:
                        print("1 bot")
                        # SELECCIONADOR DE IMAGENES EN FASE 3 DERROTA
                        if self.x == 637 and self.y == 860:
                            self.img = self.imgs4[self.contador_animacion]
                        else:
                            self.img = self.imgs[self.contador_animacion]
                    elif self.posicion == 2:
                        print("2 bot")
                        # SELECCIONADOR DE IMAGENES EN FASE 3 DERROTA
                        if self.x == 637 and self.y == 910:
                            self.img = self.imgs4[self.contador_animacion]
                        else:
                            self.img = self.imgs[self.contador_animacion]
            elif not self.torre_1_derecha and self.torre_2_derecha and self.torre_1_izquierda and self.torre_2_izquierda:
                print("FASE 2V")
                if self.linea == "top":
                    if self.posicion == 1:
                        print("1 top")
                        # SELECCIONADOR DE IMAGENES EN FASE 2 VICTORIA
                        if self.x == 829 and self.y == 126:
                            self.img = self.imgs4[self.contador_animacion]
                        else:
                            if self.x >= 496 and self.y <= 294:
                                self.img = self.imgs[self.contador_animacion]
                            else:
                                self.img = self.imgs2[self.contador_animacion]
                    elif self.posicion == 2:
                        print("2 top")
                        # SELECCIONADOR DE IMAGENES EN FASE 2 VICTORIA
                        if self.x == 535 and self.y == 318 or self.x == 679 and self.y == 174 or self.x == 838 and self.y == 174:
                            self.img = self.imgs4[self.contador_animacion]
                        else:
                            if self.x >= 507 and self.y <= 315:
                                self.img = self.imgs[self.contador_animacion]
                            else:
                                self.img = self.imgs2[self.contador_animacion]
                elif self.linea == "mid":
                    if self.posicion == 1:
                        print("1 mid")
                        # SELECCIONADOR DE IMAGENES EN FASE 2 VICTORIA
                        if self.x == 879 and self.y == 490 or self.x == 966 and self.y == 490 or self.x == 1023 and self.y == 472:
                            self.img = self.imgs4[self.contador_animacion]
                        else:
                            self.img = self.imgs[self.contador_animacion]
                    elif self.posicion == 2:
                        print("2 mid")
                        # SELECCIONADOR DE IMAGENES EN FASE 2 VICTORIA
                        if self.x == 830 and self.y == 605 or self.x == 872 and self.y == 563 or self.x == 1005 and self.y == 490:
                            self.img = self.imgs4[self.contador_animacion]
                        else:
                            self.img = self.imgs[self.contador_animacion]
                elif self.linea == "bot":
                    if self.posicion == 1:
                        print("1 bot")
                        # SELECCIONADOR DE IMAGENES EN FASE 2 VICTORIA
                        if self.x == 1348 and self.y == 632  or self.x == 1348 and self.y == 734:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            if self.x == 1222 and self.y == 860:
                                self.img = self.imgs4[self.contador_animacion]
                            else:
                                if self.x >= 1348 and self.y <= 734:
                                    self.img = self.imgs2[self.contador_animacion]
                                else:
                                    self.img = self.imgs[self.contador_animacion]
                    elif self.posicion == 2:
                        print("2 bot")
                        # SELECCIONADOR DE IMAGENES EN FASE 2 VICTORIA
                        if self.x == 1399 and self.y == 631:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            if self.x >= 1399 and self.y <= 733:
                                self.img = self.imgs2[self.contador_animacion]
                            else:
                                self.img = self.imgs[self.contador_animacion]
            elif fase3v:
                print("FASE 3V")
                if self.linea == "top":
                    if self.posicion == 1:
                        print("1 top")
                        # SELECCIONADOR DE IMAGENES EN FASE 3 VICTORIA
                        if self.x == 1000 and self.y == 126:
                            self.img = self.imgs4[self.contador_animacion]
                        else:
                            if self.x >= 496 and self.y <= 294:
                                self.img = self.imgs[self.contador_animacion]
                            else:
                                self.img = self.imgs2[self.contador_animacion]
                    elif self.posicion == 2:
                        print("2 top")
                        # SELECCIONADOR DE IMAGENES EN FASE 3 VICTORIA
                        if self.x == 535 and self.y == 318 or self.x == 679 and self.y == 174 or self.x == 1009 and self.y == 174:
                            self.img = self.imgs4[self.contador_animacion]
                        else:
                            if self.x >= 507 and self.y <= 315:
                                self.img = self.imgs[self.contador_animacion]
                            else:
                                self.img = self.imgs2[self.contador_animacion]
                elif self.linea == "mid":
                    if self.posicion == 1:
                        print("1 mid")
                        # SELECCIONADOR DE IMAGENES EN FASE 3 VICTORIA
                        if self.x == 879 and self.y == 490 or self.x == 966 and self.y == 490 or self.x == 1104 and self.y == 391:
                            self.img = self.imgs4[self.contador_animacion]
                        else:
                            self.img = self.imgs[self.contador_animacion]
                    elif self.posicion == 2:
                        print("2 mid")
                        # SELECCIONADOR DE IMAGENES EN FASE 3 VICTORIA
                        if self.x == 830 and self.y == 605 or self.x == 872 and self.y == 563 or self.x == 1151 and self.y == 422:
                            self.img = self.imgs4[self.contador_animacion]
                        else:
                            self.img = self.imgs[self.contador_animacion]
                elif self.linea == "bot":
                    if self.posicion == 1:
                        print("1 bot")
                        # SELECCIONADOR DE IMAGENES EN FASE 3 VICTORIA
                        if self.x == 1348 and self.y == 461 or self.x == 1348 and self.y == 734:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            if self.x == 1222 and self.y == 860:
                                self.img = self.imgs4[self.contador_animacion]
                            else:
                                if self.x >= 1348 and self.y <= 734:
                                    self.img = self.imgs2[self.contador_animacion]
                                else:
                                    self.img = self.imgs[self.contador_animacion]
                    elif self.posicion == 2:
                        print("2 bot")
                        # SELECCIONADOR DE IMAGENES EN FASE 3 VICTORIA
                        if self.x == 1399 and self.y == 460:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            if self.x >= 1399 and self.y <= 733:
                                self.img = self.imgs2[self.contador_animacion]
                            else:
                                self.img = self.imgs[self.contador_animacion]

            if self.linea != "":
                self.contador_animacion += 1
                #ESTE IF REINICIARA EL CONTADOR DE ANIMACIONES PAR A SIMULAR EL MOVIMIENTO DE LA IMGANES
                if self.contador_animacion >= len(self.imgs):
                    self.contador_animacion = 0

                if self.health > 0:
                    win.blit(self.img, (self.x, self.y))
                else:
                    win.blit(self.img, (10000, 10000))
                    self.health = 0
                    self.path_pos = 0

                self.mover()
                if self.health > 0:
                    self.draw_health_bar(win)

    def colision(self, X, Y):
        """
        DETECTA QUE EL SUBDITO RECIBA UNA COLISION
        :param x: INT
        :param y: INT
        :return: BOOLEAN
        """
        #ESTE IF COMPROBARA MEDIANTE LAS POSICIONES EN EL EJE SI HAN GOLPEADO AL SUBDITO
        if X <= self.x + self.width and X >= self.x:
            if Y <= self.y + self.height and Y >=self.y:
                return True
        return False


    def mover(self):
        """
        MUEVE AL SUBDITO
        :return: NADA
        """
        # SELECCIONAR EL PATH SEGUN EL ESTADO DE LA PARTIDA
        if self.health > 0:
            if self.torre_1_derecha and self.torre_2_derecha and self.torre_1_izquierda and self.torre_2_izquierda:
                print("FASE 1")
                self.path = self.path1
            elif not self.torre_1_derecha and self.torre_2_derecha and not self.torre_1_izquierda and self.torre_2_izquierda:
                print("FASE 1")
                self.path = self.path1
            elif not self.torre_1_derecha and not self.torre_2_derecha and not self.torre_1_izquierda and not self.torre_2_izquierda:
                print("FASE 1")
                self.path = self.path1
            elif self.torre_1_derecha and self.torre_2_derecha and not self.torre_1_izquierda and self.torre_2_izquierda:
                print("FASE 2D")
                self.path = self.path2d
            elif self.torre_1_derecha and self.torre_2_derecha and not self.torre_1_izquierda and not self.torre_2_izquierda:
                print("FASE 3D")
                self.path = self.path3d
            elif not self.torre_1_derecha and self.torre_2_derecha and not self.torre_1_izquierda and not self.torre_2_izquierda:
                print("FASE 3D")
                self.path = self.path3d
            elif not self.torre_1_derecha and self.torre_2_derecha and self.torre_1_izquierda and self.torre_2_izquierda:
                print("FASE 2V")
                self.path = self.path2v
            elif not self.torre_1_derecha and not self.torre_2_derecha and self.torre_1_izquierda and self.torre_2_izquierda:
                print("FASE 3V")
                self.path = self.path3v
            elif not self.torre_1_derecha and not self.torre_2_derecha and not self.torre_1_izquierda and self.torre_2_izquierda:
                print("FASE 3V")
                self.path = self.path3v

        #TODA ESTA MIERDA ES PARA CALCULAR EL MOVIMIENTO ENTRE PUNTOS MEDIANTE EL TEOREMA DE PITAGORAS(VECTORES)
        if self.health <= 0:
            self.path_pos = 0

        x1,y1 = self.path[self.path_pos]
        print(self.path[self.path_pos], self.nombre)
        if self.path_pos + 1 >= len(self.path):
            x2, y2 = (672, 147)
        else:
            x2,y2 = self.path[self.path_pos+1]


        move_dis = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)

        self.cont_mover += 1
        dirn = (x2-x1, y2-y1)


        mover_x, mover_y = (self.x + dirn[0] * self.cont_mover, self.y + dirn[1] * self.cont_mover)
        self.dis += math.sqrt((mover_x - x1) ** 2 + (mover_y - y1) ** 2)

        #VA AL SIGUIENTE PUNTO
        if self.dis >= move_dis:
            self.dis = 0
            self.cont_mover = 0
                #self.path_pos=0
                #self.path_pos += 1
            if self.path_pos < len(self.path)-1:
                self.path_pos += 1
            else:
                return False

            self.x = mover_x
            self.y = mover_y
        return True

    def hit(self):
        """
        DEVUELVE SI EL SUBDITO HA SIDO GOLPEADO Y LE RESTA VIDA
        :return: BOOLEAN
        """
        dmg = random.choice(range(0, 3))
        #dmg = 10
        self.health -= dmg
        if self.health <= 0:
            self.path_pos = 0
            self.health = 0

    def draw_health_bar(self, win):  # Barra de vida
        """
        draw health bar above enemy
        :param win: surface
        :return: None
        """

        length = 25
        move_by = length / self.max_health
        health_bar = round(move_by * self.health)

        pygame.draw.rect(win, (255, 0, 0), (self.x - 0, self.y - 7, length, 5), 0)
        pygame.draw.rect(win, (0, 255, 0), (self.x - 0, self.y - 7, health_bar, 5), 0)

    """
    Si el estado esta en True quiere decir que el minion se va a dibujar
    Si el estado esta en False quiere decir que el minion no se va a dibujar
    """

    def estado_partida(self):
        if self.estado:
            self.posicion = 0
            self.linea = ""
            self.estado = False
        else:
            self.estado = True
            self.contador_animacion = 0
            self.health = 650  # Barra de vida
            self.x = self.path[0][0]
            self.y = self.path[0][1]
            self.dis = 0
            self.path_pos = 0
            self.cont_mover = 0
            self.dist_mover = 0

            self.cont = 0