import random
import sqlite3

import pygame
import math


class Accion_minato:

    def __init__(self):

        self.width = 64
        self.height = 64
        self.contador_animacion = 0
        self.vel = 3

        self.path = [(10000,10000)]
        self.path1 = []
        self.path2v = []
        self.path2d = []
        self.path3v = []
        self.path3d = []
        self.x = self.path[0][0]
        self.y = self.path[0][1]

        self.img = None
        self.dis = 0
        self.path_pos = 0
        self.cont_mover = 0
        self.dist_mover = 0

        self.nombre = ""
        self.estado = False
        self.torre_1_derecha = 1
        self.torre_2_derecha = 1
        self.torre_1_izquierda = 1
        self.torre_2_izquierda = 1

        self.posicion = 1
        self.linea = "top"
        self.cont = 0

        self.dano = 75
        self.health = 400  # Barra de vida
        self.max_health = 400  # Barra de vida
        self.armadura = 5

    def draw(self, win):
        
        self.nombre = self.id
        """
        DIBUJA A LOS ENEMIGOS CON LAS IMAGENES ESTABLECIDAS
        :param win: SURFACE
        """
        conexion = sqlite3.connect('../datos.db')
        cursor = conexion.cursor()
        if self.estado:
            if self.linea == "top":
                if self.posicion == 1:
                    print("1 top")
                    self.path = [(10000,10000),(1278,125),(1275,125),(1272,125),(1269,125),(1266,125),(1263,125),(1260,125),(1257,125),(1254,125),(1251,125),(1248,125),(1245,125),(1242,125),(1239,125),(1236,125),(1233,125),(1230,125),(1227,125),(1224,125),(1221,125),(1218,125),(1215,125),(1212,125),(1209,125),(1206,125),(1203,125),(1200,125),(1197,125),(1194,125),(1191,125),(1188,125),(1185,125),(1182,125),(1179,125),(1176,125),(1173,125),(1170,125),(1167,125),(1164,125),(1161,125),(1158,125),(1155,125),(1152,125),(1149,125),(1146,125),(1143,125),(1140,125),(1137,125),(1134,125),(1131,125),(1128,125),(1125,125),(1122,125),(1119,125),(1116,125),(1113,125),(1110,125),(1107,125),(1104,125),(1101,125),(1098,125),(1095,125),(1092,125),(1089,125),(1086,125),(1083,125),(1080,125),(1077,125),(1074,125),(1071,125),(1068,125),(1065,125),(1062,125),(1059,125),(1056,125),(1053,125),(1050,125),(1047,125),(1044,125),(1041,125),(1038,125),(1035,125),(1032,125),(1029,125),(1026,125),(1023,125),(1020,125),(1017,125),(1014,125),(1011,125),(1008,125),(1005,125),(1002,125),(999,125),(996,125),(993,125),(990,125),(987,125),(984,125),(981,125),(978,125),(975,125),(972,125),(969,125),(966,125),(963,125),(960,125),(957,125),(954,125),(951,125),(948,125),(945,125),(942,125),(939,125),(936,125),(933,125),(930,125),(927,125),(924,125),(921,125),(918,125),(915,125),(912,125),(909,125),(906,125),(903,125),(900,125),(897,125),(894,125),(891,125),(888,125),(885,125),(882,125),(879,125),(876,125),(873,125),(870,125),(867,125),(864,125),(861,125),(858,125),(855,125),(852,125),(849,125),(846,125),(843,125),(840,125),(837,125),(834,125),(831,125),(828,125),(825,125),(822,125),(819,125),(816,125),(813,125),(810,125),(807,125),(804,125),(801,125),(798,125),(795,125),(792,125),(789,125),(786,125),(783,125),(780,125),(777,125),(774,125),(771,125),(768,125),(765,125),(762,125),(759,125),(756,125),(753,125),(750,125),(747,125),(744,125),(741,125),(738,125),(735,125),(732,125),(729,125),(726,125),(723,125),(720,125),(717,125),(714,125),(711,125),(708,125),(705,125),(702,125),(699,125),(696,125),(693,125),(690,125),(687,125),(684,125),(681,125),(678,125),(675,125),(672,125),(669,125),(666,125),(663,125),(660,125),(657,128),(654,131),(651,134),(648,137),(645,140),(642,143),(639,146),(636,149),(633,152),(630,155),(627,158),(624,161)]
                    self.path1 = [(10000,10000),(1278,125),(1275,125),(1272,125),(1269,125),(1266,125),(1263,125),(1260,125),(1257,125),(1254,125),(1251,125),(1248,125),(1245,125),(1242,125),(1239,125),(1236,125),(1233,125),(1230,125),(1227,125),(1224,125),(1221,125),(1218,125),(1215,125),(1212,125),(1209,125),(1206,125),(1203,125),(1200,125),(1197,125),(1194,125),(1191,125),(1188,125),(1185,125),(1182,125),(1179,125),(1176,125),(1173,125),(1170,125),(1167,125),(1164,125),(1161,125),(1158,125),(1155,125),(1152,125),(1149,125),(1146,125),(1143,125),(1140,125),(1137,125),(1134,125),(1131,125),(1128,125),(1125,125),(1122,125),(1119,125),(1116,125),(1113,125),(1110,125),(1107,125),(1104,125),(1101,125),(1098,125),(1095,125),(1092,125),(1089,125),(1086,125),(1083,125),(1080,125),(1077,125),(1074,125),(1071,125),(1068,125),(1065,125),(1062,125),(1059,125),(1056,125),(1053,125),(1050,125),(1047,125),(1044,125),(1041,125),(1038,125),(1035,125),(1032,125),(1029,125),(1026,125),(1023,125),(1020,125),(1017,125),(1014,125),(1011,125),(1008,125),(1005,125),(1002,125),(999,125),(996,125),(993,125),(990,125),(987,125),(984,125),(981,125),(978,125),(975,125),(972,125),(969,125),(966,125),(963,125),(960,125),(957,125),(954,125),(951,125),(948,125),(945,125),(942,125),(939,125),(936,125),(933,125),(930,125),(927,125),(924,125),(921,125),(918,125),(915,125),(912,125),(909,125),(906,125),(903,125),(900,125),(897,125),(894,125),(891,125),(888,125),(885,125),(882,125),(879,125),(876,125),(873,125),(870,125),(867,125),(864,125),(861,125),(858,125),(855,125),(852,125),(849,125),(846,125),(843,125),(840,125),(837,125),(834,125),(831,125),(828,125),(825,125),(822,125),(819,125),(816,125),(813,125),(810,125),(807,125),(804,125),(801,125),(798,125),(795,125),(792,125),(789,125),(786,125),(783,125),(780,125),(777,125),(774,125),(771,125),(768,125),(765,125),(762,125),(759,125),(756,125),(753,125),(750,125),(747,125),(744,125),(741,125),(738,125),(735,125),(732,125),(729,125),(726,125),(723,125),(720,125),(717,125),(714,125),(711,125),(708,125),(705,125),(702,125),(699,125),(696,125),(693,125),(690,125),(687,125),(684,125),(681,125),(678,125),(675,125),(672,125),(669,125),(666,125),(663,125),(660,125),(657,128),(654,131),(651,134),(648,137),(645,140),(642,143),(639,146),(636,149),(633,152),(630,155),(627,158),(624,161)]
                    self.path2v = [(10000,10000),(1278,125),(1275,125),(1272,125),(1269,125),(1266,125),(1263,125),(1260,125),(1257,125),(1254,125),(1251,125),(1248,125),(1245,125),(1242,125),(1239,125),(1236,125),(1233,125),(1230,125),(1227,125),(1224,125),(1221,125),(1218,125),(1215,125),(1212,125),(1209,125),(1206,125),(1203,125),(1200,125),(1197,125),(1194,125),(1191,125),(1188,125),(1185,125),(1182,125),(1179,125),(1176,125),(1173,125),(1170,125),(1167,125),(1164,125),(1161,125),(1158,125),(1155,125),(1152,125),(1149,125),(1146,125),(1143,125),(1140,125),(1137,125),(1134,125),(1131,125),(1128,125),(1125,125),(1122,125),(1119,125),(1116,125),(1113,125),(1110,125),(1107,125),(1104,125),(1101,125),(1098,125),(1095,125),(1092,125),(1089,125),(1086,125),(1083,125),(1080,125),(1077,125),(1074,125),(1071,125),(1068,125),(1065,125),(1062,125),(1059,125),(1056,125),(1053,125),(1050,125),(1047,125),(1044,125),(1041,125),(1038,125),(1035,125),(1032,125),(1029,125),(1026,125),(1023,125),(1020,125),(1017,125),(1014,125),(1011,125),(1008,125),(1005,125),(1002,125),(999,125),(996,125),(993,125),(990,125),(987,125),(984,125),(981,125),(978,125),(975,125),(972,125),(969,125),(966,125),(963,125),(960,125),(957,125),(954,125),(951,125),(948,125),(945,125),(942,125),(939,125),(936,125),(933,125),(930,125),(927,125),(924,125),(921,125),(918,125),(915,125),(912,125),(909,125),(906,125),(903,125),(900,125),(897,125),(894,125),(891,125),(888,125),(885,125),(882,125),(879,125),(876,125),(873,125),(870,125),(867,125),(864,125),(861,125),(858,125),(855,125),(852,125),(849,125),(846,125),(843,125),(840,125),(837,125),(834,125),(831,125),(828,125),(825,125),(822,125),(819,125),(816,125),(813,125),(810,125),(807,125),(804,125),(801,125),(798,125),(795,125),(792,125),(789,125),(786,125),(783,125),(780,125),(777,125),(774,125),(771,125),(768,125),(765,125),(762,125),(759,125),(756,125),(753,125),(750,125),(747,125),(744,125),(741,125),(738,125),(735,125),(732,125),(729,125),(726,125),(723,125),(720,125),(717,125),(714,125),(711,125),(708,125),(705,125),(702,125),(699,125),(696,125),(693,125),(690,125),(687,125),(684,125),(681,125),(678,125),(675,125),(672,125),(669,125),(666,125),(663,125),(660,125),(657,128),(654,131),(651,134),(648,137),(645,140),(642,143),(639,146),(636,149),(633,152),(630,155),(627,158),(624,161),(621,164),(618,167),(615,170),(612,173),(609,176),(606,179),(603,182),(600,185),(597,188),(594,191),(591,194),(588,197),(585,200),(582,203),(579,206),(576,209),(573,212),(570,215),(567,218),(564,221),(561,224),(558,227),(555,230),(552,233),(549,236),(546,239),(543,242),(540,245),(537,248),(534,251),(531,254),(528,257),(525,260),(522,263),(519,266),(516,269),(513,272),(510,275),(507,278),(504,281),(501,284),(498,287),(495,290),(492,293),(492,296),(492,299),(492,302),(492,305),(492,308),(492,311),(492,314),(492,317),(492,320),(492,323),(492,326),(492,329),(492,332),(492,335),(492,338),(492,341),(492,344),(492,347),(492,350),(492,353),(492,356),(492,359),(492,362),(492,365),(492,368),(492,371),(492,374),(492,377),(492,380),(492,383),(492,386),(492,389),(492,392),(492,395),(492,398),(492,401),(492,404),(492,407),(492,410),(492,413),(492,416),(492,419),(492,422),(492,425),(492,428),(492,431)]
                    self.path3v = [(10000,10000),(1278,125),(1275,125),(1272,125),(1269,125),(1266,125),(1263,125),(1260,125),(1257,125),(1254,125),(1251,125),(1248,125),(1245,125),(1242,125),(1239,125),(1236,125),(1233,125),(1230,125),(1227,125),(1224,125),(1221,125),(1218,125),(1215,125),(1212,125),(1209,125),(1206,125),(1203,125),(1200,125),(1197,125),(1194,125),(1191,125),(1188,125),(1185,125),(1182,125),(1179,125),(1176,125),(1173,125),(1170,125),(1167,125),(1164,125),(1161,125),(1158,125),(1155,125),(1152,125),(1149,125),(1146,125),(1143,125),(1140,125),(1137,125),(1134,125),(1131,125),(1128,125),(1125,125),(1122,125),(1119,125),(1116,125),(1113,125),(1110,125),(1107,125),(1104,125),(1101,125),(1098,125),(1095,125),(1092,125),(1089,125),(1086,125),(1083,125),(1080,125),(1077,125),(1074,125),(1071,125),(1068,125),(1065,125),(1062,125),(1059,125),(1056,125),(1053,125),(1050,125),(1047,125),(1044,125),(1041,125),(1038,125),(1035,125),(1032,125),(1029,125),(1026,125),(1023,125),(1020,125),(1017,125),(1014,125),(1011,125),(1008,125),(1005,125),(1002,125),(999,125),(996,125),(993,125),(990,125),(987,125),(984,125),(981,125),(978,125),(975,125),(972,125),(969,125),(966,125),(963,125),(960,125),(957,125),(954,125),(951,125),(948,125),(945,125),(942,125),(939,125),(936,125),(933,125),(930,125),(927,125),(924,125),(921,125),(918,125),(915,125),(912,125),(909,125),(906,125),(903,125),(900,125),(897,125),(894,125),(891,125),(888,125),(885,125),(882,125),(879,125),(876,125),(873,125),(870,125),(867,125),(864,125),(861,125),(858,125),(855,125),(852,125),(849,125),(846,125),(843,125),(840,125),(837,125),(834,125),(831,125),(828,125),(825,125),(822,125),(819,125),(816,125),(813,125),(810,125),(807,125),(804,125),(801,125),(798,125),(795,125),(792,125),(789,125),(786,125),(783,125),(780,125),(777,125),(774,125),(771,125),(768,125),(765,125),(762,125),(759,125),(756,125),(753,125),(750,125),(747,125),(744,125),(741,125),(738,125),(735,125),(732,125),(729,125),(726,125),(723,125),(720,125),(717,125),(714,125),(711,125),(708,125),(705,125),(702,125),(699,125),(696,125),(693,125),(690,125),(687,125),(684,125),(681,125),(678,125),(675,125),(672,125),(669,125),(666,125),(663,125),(660,125),(657,128),(654,131),(651,134),(648,137),(645,140),(642,143),(639,146),(636,149),(633,152),(630,155),(627,158),(624,161),(621,164),(618,167),(615,170),(612,173),(609,176),(606,179),(603,182),(600,185),(597,188),(594,191),(591,194),(588,197),(585,200),(582,203),(579,206),(576,209),(573,212),(570,215),(567,218),(564,221),(561,224),(558,227),(555,230),(552,233),(549,236),(546,239),(543,242),(540,245),(537,248),(534,251),(531,254),(528,257),(525,260),(522,263),(519,266),(516,269),(513,272),(510,275),(507,278),(504,281),(501,284),(498,287),(495,290),(492,293),(492,296),(492,299),(492,302),(492,305),(492,308),(492,311),(492,314),(492,317),(492,320),(492,323),(492,326),(492,329),(492,332),(492,335),(492,338),(492,341),(492,344),(492,347),(492,350),(492,353),(492,356),(492,359),(492,362),(492,365),(492,368),(492,371),(492,374),(492,377),(492,380),(492,383),(492,386),(492,389),(492,392),(492,395),(492,398),(492,401),(492,404),(492,407),(492,410),(492,413),(492,416),(492,419),(492,422),(492,425),(492,428),(492,431),(492,434),(492,437),(492,440),(492,443),(492,446),(492,449),(492,452),(492,455),(492,458),(492,461),(492,464),(492,467),(492,470),(492,473),(492,476),(492,479),(492,482),(492,485),(492,488),(492,491),(492,494),(492,497),(492,500),(492,503),(492,506),(492,509),(492,512),(492,515),(492,518),(492,521),(492,524),(492,527),(492,530),(492,533),(492,536),(492,539),(492,542),(492,545),(492,548),(492,551),(492,554),(492,557),(492,560),(492,563),(492,566),(492,569),(492,572)]
                    self.path2d = [(10000,10000),(1278,125),(1275,125),(1272,125),(1269,125),(1266,125),(1263,125),(1260,125),(1257,125),(1254,125),(1251,125),(1248,125),(1245,125),(1242,125),(1239,125),(1236,125),(1233,125),(1230,125),(1227,125),(1224,125),(1221,125),(1218,125),(1215,125),(1212,125),(1209,125),(1206,125),(1203,125),(1200,125),(1197,125),(1194,125),(1191,125),(1188,125),(1185,125),(1182,125),(1179,125),(1176,125),(1173,125),(1170,125),(1167,125),(1164,125),(1161,125),(1158,125),(1155,125),(1152,125),(1149,125),(1146,125),(1143,125),(1140,125),(1137,125),(1134,125),(1131,125),(1128,125),(1125,125),(1122,125),(1119,125),(1116,125),(1113,125),(1110,125),(1107,125),(1104,125),(1101,125),(1098,125),(1095,125),(1092,125),(1089,125),(1086,125),(1083,125),(1080,125),(1077,125),(1074,125),(1071,125),(1068,125),(1065,125),(1062,125),(1059,125),(1056,125),(1053,125)]
                    self.path3d = [(10000,10000),(1278,125),(1275,125),(1272,125),(1269,125),(1266,125),(1263,125),(1260,125),(1257,125),(1254,125),(1251,125),(1248,125),(1245,125),(1242,125),(1239,125),(1236,125),(1233,125)]

                    if not self.cont:
                        self.x = self.path[0][0]
                        self.y = self.path[0][1]
                        self.cont = 1
                elif self.posicion == 2:
                    print("2 top")
                    self.path = [(10000,10000),(1278,175),(1275,175),(1272,175),(1269,175),(1266,175),(1263,175),(1260,175),(1257,175),(1254,175),(1251,175),(1248,175),(1245,175),(1242,175),(1239,175),(1236,175),(1233,175),(1230,175),(1227,175),(1224,175),(1221,175),(1218,175),(1215,175),(1212,175),(1209,175),(1206,175),(1203,175),(1200,175),(1197,175),(1194,175),(1191,175),(1188,175),(1185,175),(1182,175),(1179,175),(1176,175),(1173,175),(1170,175),(1167,175),(1164,175),(1161,175),(1158,175),(1155,175),(1152,175),(1149,175),(1146,175),(1143,175),(1140,175),(1137,175),(1134,175),(1131,175),(1128,175),(1125,175),(1122,175),(1119,175),(1116,175),(1113,175),(1110,175),(1107,175),(1104,175),(1101,175),(1098,175),(1095,175),(1092,175),(1089,175),(1086,175),(1083,175),(1080,175),(1077,175),(1074,175),(1071,175),(1068,175),(1065,175),(1062,175),(1059,175),(1056,175),(1053,175),(1050,175),(1047,175),(1044,175),(1041,175),(1038,175),(1035,175),(1032,175),(1029,175),(1026,175),(1023,175),(1020,175),(1017,175),(1014,175),(1011,175),(1008,175),(1005,175),(1002,175),(999,175),(996,175),(993,175),(990,175),(987,175),(984,175),(981,175),(978,175),(975,175),(972,175),(969,175),(966,175),(963,175),(960,175),(957,175),(954,175),(951,175),(948,175),(945,175),(942,175),(939,175),(936,175),(933,175),(930,175),(927,175),(924,175),(921,175),(918,175),(915,175),(912,175),(909,175),(906,175),(903,175),(900,175),(897,175),(894,175),(891,175),(888,175),(885,175),(882,175),(879,175),(876,175),(873,175),(870,175),(867,175),(864,175),(861,175),(858,175),(855,175),(852,175),(849,175),(846,175),(843,175),(840,175),(837,175),(834,175),(831,175),(828,175),(825,175),(822,175),(819,175),(816,175),(813,175),(810,175),(807,175),(804,175),(801,175),(798,175),(795,175),(792,175),(789,175),(786,175),(783,175),(780,175),(777,175),(774,175),(771,175),(768,175),(765,175),(762,175),(759,175),(756,175),(753,175),(750,175),(747,175),(744,175),(741,175),(738,175),(735,175),(732,175),(729,175),(726,175),(723,175),(720,175),(717,175),(714,175),(711,175),(708,175),(705,175),(702,175),(699,175),(696,175),(693,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(687,178),(684,181),(681,184),(678,187),(675,190),(672,193),(669,196)]
                    self.path1 = [(10000,10000),(1278,175),(1275,175),(1272,175),(1269,175),(1266,175),(1263,175),(1260,175),(1257,175),(1254,175),(1251,175),(1248,175),(1245,175),(1242,175),(1239,175),(1236,175),(1233,175),(1230,175),(1227,175),(1224,175),(1221,175),(1218,175),(1215,175),(1212,175),(1209,175),(1206,175),(1203,175),(1200,175),(1197,175),(1194,175),(1191,175),(1188,175),(1185,175),(1182,175),(1179,175),(1176,175),(1173,175),(1170,175),(1167,175),(1164,175),(1161,175),(1158,175),(1155,175),(1152,175),(1149,175),(1146,175),(1143,175),(1140,175),(1137,175),(1134,175),(1131,175),(1128,175),(1125,175),(1122,175),(1119,175),(1116,175),(1113,175),(1110,175),(1107,175),(1104,175),(1101,175),(1098,175),(1095,175),(1092,175),(1089,175),(1086,175),(1083,175),(1080,175),(1077,175),(1074,175),(1071,175),(1068,175),(1065,175),(1062,175),(1059,175),(1056,175),(1053,175),(1050,175),(1047,175),(1044,175),(1041,175),(1038,175),(1035,175),(1032,175),(1029,175),(1026,175),(1023,175),(1020,175),(1017,175),(1014,175),(1011,175),(1008,175),(1005,175),(1002,175),(999,175),(996,175),(993,175),(990,175),(987,175),(984,175),(981,175),(978,175),(975,175),(972,175),(969,175),(966,175),(963,175),(960,175),(957,175),(954,175),(951,175),(948,175),(945,175),(942,175),(939,175),(936,175),(933,175),(930,175),(927,175),(924,175),(921,175),(918,175),(915,175),(912,175),(909,175),(906,175),(903,175),(900,175),(897,175),(894,175),(891,175),(888,175),(885,175),(882,175),(879,175),(876,175),(873,175),(870,175),(867,175),(864,175),(861,175),(858,175),(855,175),(852,175),(849,175),(846,175),(843,175),(840,175),(837,175),(834,175),(831,175),(828,175),(825,175),(822,175),(819,175),(816,175),(813,175),(810,175),(807,175),(804,175),(801,175),(798,175),(795,175),(792,175),(789,175),(786,175),(783,175),(780,175),(777,175),(774,175),(771,175),(768,175),(765,175),(762,175),(759,175),(756,175),(753,175),(750,175),(747,175),(744,175),(741,175),(738,175),(735,175),(732,175),(729,175),(726,175),(723,175),(720,175),(717,175),(714,175),(711,175),(708,175),(705,175),(702,175),(699,175),(696,175),(693,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(687,178),(684,181),(681,184),(678,187),(675,190),(672,193),(669,196)]
                    self.path2v = [(10000,10000),(1278,175),(1275,175),(1272,175),(1269,175),(1266,175),(1263,175),(1260,175),(1257,175),(1254,175),(1251,175),(1248,175),(1245,175),(1242,175),(1239,175),(1236,175),(1233,175),(1230,175),(1227,175),(1224,175),(1221,175),(1218,175),(1215,175),(1212,175),(1209,175),(1206,175),(1203,175),(1200,175),(1197,175),(1194,175),(1191,175),(1188,175),(1185,175),(1182,175),(1179,175),(1176,175),(1173,175),(1170,175),(1167,175),(1164,175),(1161,175),(1158,175),(1155,175),(1152,175),(1149,175),(1146,175),(1143,175),(1140,175),(1137,175),(1134,175),(1131,175),(1128,175),(1125,175),(1122,175),(1119,175),(1116,175),(1113,175),(1110,175),(1107,175),(1104,175),(1101,175),(1098,175),(1095,175),(1092,175),(1089,175),(1086,175),(1083,175),(1080,175),(1077,175),(1074,175),(1071,175),(1068,175),(1065,175),(1062,175),(1059,175),(1056,175),(1053,175),(1050,175),(1047,175),(1044,175),(1041,175),(1038,175),(1035,175),(1032,175),(1029,175),(1026,175),(1023,175),(1020,175),(1017,175),(1014,175),(1011,175),(1008,175),(1005,175),(1002,175),(999,175),(996,175),(993,175),(990,175),(987,175),(984,175),(981,175),(978,175),(975,175),(972,175),(969,175),(966,175),(963,175),(960,175),(957,175),(954,175),(951,175),(948,175),(945,175),(942,175),(939,175),(936,175),(933,175),(930,175),(927,175),(924,175),(921,175),(918,175),(915,175),(912,175),(909,175),(906,175),(903,175),(900,175),(897,175),(894,175),(891,175),(888,175),(885,175),(882,175),(879,175),(876,175),(873,175),(870,175),(867,175),(864,175),(861,175),(858,175),(855,175),(852,175),(849,175),(846,175),(843,175),(840,175),(837,175),(834,175),(831,175),(828,175),(825,175),(822,175),(819,175),(816,175),(813,175),(810,175),(807,175),(804,175),(801,175),(798,175),(795,175),(792,175),(789,175),(786,175),(783,175),(780,175),(777,175),(774,175),(771,175),(768,175),(765,175),(762,175),(759,175),(756,175),(753,175),(750,175),(747,175),(744,175),(741,175),(738,175),(735,175),(732,175),(729,175),(726,175),(723,175),(720,175),(717,175),(714,175),(711,175),(708,175),(705,175),(702,175),(699,175),(696,175),(693,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(687,178),(684,181),(681,184),(678,187),(675,190),(672,193),(669,196),(666,199),(663,202),(660,205),(657,208),(654,211),(651,214),(648,217),(645,220),(642,223),(639,226),(636,229),(633,232),(630,235),(627,238),(624,241),(621,244),(618,247),(615,250),(612,253),(609,256),(606,259),(603,262),(600,265),(597,268),(594,271),(591,274),(588,277),(585,280),(582,283),(579,286),(576,289),(573,292),(570,295),(567,298),(564,301),(561,304),(558,307),(555,310),(552,313),(549,316),(546,319),(543,322),(540,325),(537,328),(534,331),(534,331),(534,331),(534,331),(534,331),(534,331),(534,331),(534,331),(534,331),(534,331),(534,331),(534,331),(534,331),(534,331),(534,331),(534,334),(534,337),(534,340),(534,343),(534,346),(534,349),(534,352),(534,355),(534,358),(534,361),(534,364),(534,367),(534,370),(534,373),(534,376),(534,379),(534,382),(534,385),(534,388),(534,391),(534,394),(534,397),(534,400),(534,403),(534,406),(534,409),(534,412),(534,415),(534,418),(534,421),(534,424),(534,427),(534,430),(534,433)]
                    self.path3v = [(10000,10000),(1278,175),(1275,175),(1272,175),(1269,175),(1266,175),(1263,175),(1260,175),(1257,175),(1254,175),(1251,175),(1248,175),(1245,175),(1242,175),(1239,175),(1236,175),(1233,175),(1230,175),(1227,175),(1224,175),(1221,175),(1218,175),(1215,175),(1212,175),(1209,175),(1206,175),(1203,175),(1200,175),(1197,175),(1194,175),(1191,175),(1188,175),(1185,175),(1182,175),(1179,175),(1176,175),(1173,175),(1170,175),(1167,175),(1164,175),(1161,175),(1158,175),(1155,175),(1152,175),(1149,175),(1146,175),(1143,175),(1140,175),(1137,175),(1134,175),(1131,175),(1128,175),(1125,175),(1122,175),(1119,175),(1116,175),(1113,175),(1110,175),(1107,175),(1104,175),(1101,175),(1098,175),(1095,175),(1092,175),(1089,175),(1086,175),(1083,175),(1080,175),(1077,175),(1074,175),(1071,175),(1068,175),(1065,175),(1062,175),(1059,175),(1056,175),(1053,175),(1050,175),(1047,175),(1044,175),(1041,175),(1038,175),(1035,175),(1032,175),(1029,175),(1026,175),(1023,175),(1020,175),(1017,175),(1014,175),(1011,175),(1008,175),(1005,175),(1002,175),(999,175),(996,175),(993,175),(990,175),(987,175),(984,175),(981,175),(978,175),(975,175),(972,175),(969,175),(966,175),(963,175),(960,175),(957,175),(954,175),(951,175),(948,175),(945,175),(942,175),(939,175),(936,175),(933,175),(930,175),(927,175),(924,175),(921,175),(918,175),(915,175),(912,175),(909,175),(906,175),(903,175),(900,175),(897,175),(894,175),(891,175),(888,175),(885,175),(882,175),(879,175),(876,175),(873,175),(870,175),(867,175),(864,175),(861,175),(858,175),(855,175),(852,175),(849,175),(846,175),(843,175),(840,175),(837,175),(834,175),(831,175),(828,175),(825,175),(822,175),(819,175),(816,175),(813,175),(810,175),(807,175),(804,175),(801,175),(798,175),(795,175),(792,175),(789,175),(786,175),(783,175),(780,175),(777,175),(774,175),(771,175),(768,175),(765,175),(762,175),(759,175),(756,175),(753,175),(750,175),(747,175),(744,175),(741,175),(738,175),(735,175),(732,175),(729,175),(726,175),(723,175),(720,175),(717,175),(714,175),(711,175),(708,175),(705,175),(702,175),(699,175),(696,175),(693,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(690,175),(687,178),(684,181),(681,184),(678,187),(675,190),(672,193),(669,196),(666,199),(663,202),(660,205),(657,208),(654,211),(651,214),(648,217),(645,220),(642,223),(639,226),(636,229),(633,232),(630,235),(627,238),(624,241),(621,244),(618,247),(615,250),(612,253),(609,256),(606,259),(603,262),(600,265),(597,268),(594,271),(591,274),(588,277),(585,280),(582,283),(579,286),(576,289),(573,292),(570,295),(567,298),(564,301),(561,304),(558,307),(555,310),(552,313),(549,316),(546,319),(543,322),(540,325),(537,328),(534,331),(534,331),(534,331),(534,331),(534,331),(534,331),(534,331),(534,331),(534,331),(534,331),(534,331),(534,331),(534,331),(534,331),(534,331),(534,334),(534,337),(534,340),(534,343),(534,346),(534,349),(534,352),(534,355),(534,358),(534,361),(534,364),(534,367),(534,370),(534,373),(534,376),(534,379),(534,382),(534,385),(534,388),(534,391),(534,394),(534,397),(534,400),(534,403),(534,406),(534,409),(534,412),(534,415),(534,418),(534,421),(534,424),(534,427),(534,430),(534,433),(534,436),(534,439),(534,442),(534,445),(534,448),(534,451),(534,454),(534,457),(534,460),(534,463),(534,466),(534,469),(534,472),(534,475),(534,478),(534,481),(534,484),(534,487),(534,490),(534,493),(534,496),(534,499),(534,502),(534,505),(534,508),(534,511),(534,514),(534,517),(534,520),(534,523),(534,526),(534,529),(534,532),(534,535),(534,538),(534,541),(534,544),(534,547),(534,550),(534,553),(534,556),(534,559),(534,562),(534,565),(534,568),(534,571),(534,574)]
                    self.path2d = [(10000,10000),(1278,175),(1275,175),(1272,175),(1269,175),(1266,175),(1263,175),(1260,175),(1257,175),(1254,175),(1251,175),(1248,175),(1245,175),(1242,175),(1239,175),(1236,175),(1233,175),(1230,175),(1227,175),(1224,175),(1221,175),(1218,175),(1215,175),(1212,175),(1209,175),(1206,175),(1203,175),(1200,175),(1197,175),(1194,175),(1191,175),(1188,175),(1185,175),(1182,175),(1179,175),(1176,175),(1173,175),(1170,175),(1167,175),(1164,175),(1161,175),(1158,175),(1155,175),(1152,175),(1149,175),(1146,175),(1143,175),(1140,175),(1137,175),(1134,175),(1131,175),(1128,175),(1125,175),(1122,175),(1119,175),(1116,175),(1113,175),(1110,175),(1107,175),(1104,175),(1101,175),(1098,175),(1095,175),(1092,175),(1089,175),(1086,175),(1083,175),(1080,175),(1077,175),(1074,175),(1071,175),(1068,175),(1065,175),(1062,175),(1059,175),(1056,175),(1053,175)]
                    self.path3d = [(10000,10000),(1278,175),(1275,175),(1272,175),(1269,175),(1266,175),(1263,175),(1260,175),(1257,175),(1254,175),(1251,175),(1248,175),(1245,175),(1242,175),(1239,175),(1236,175),(1233,175)]

                    if not self.cont:
                        self.x = self.path[0][0]
                        self.y = self.path[0][1]
                        self.cont = 1

                cursor.execute('SELECT estado FROM torres WHERE nombre = "torre_top_1_derecha"')
                resul = cursor.fetchall()
                for r in resul:
                    self.torre_1_derecha = r[0]
                cursor.execute('SELECT estado FROM torres WHERE nombre = "torre_top_2_derecha"')
                resul = cursor.fetchall()
                for r in resul:
                    self.torre_2_derecha = r[0]
                cursor.execute('SELECT estado FROM torres WHERE nombre = "torre_top_1_izquierda"')
                resul = cursor.fetchall()
                for r in resul:
                    self.torre_1_izquierda = r[0]
                cursor.execute('SELECT estado FROM torres WHERE nombre = "torre_top_2_izquierda"')
                resul = cursor.fetchall()
                for r in resul:
                    self.torre_2_izquierda = r[0]
            elif self.linea == "mid":
                if self.posicion == 1:
                    print("1 mid")
                    self.path = [(10000,10000),(1264,223),(1261,226),(1258,229),(1255,232),(1252,235),(1249,238),(1246,241),(1243,244),(1240,247),(1237,250),(1234,253),(1231,256),(1228,259),(1225,262),(1222,265),(1219,268),(1216,271),(1213,274),(1210,277),(1207,280),(1204,283),(1201,286),(1198,289),(1195,292),(1192,295),(1189,298),(1186,301),(1183,304),(1180,307),(1177,310),(1174,313),(1171,316),(1168,319),(1165,322),(1162,325),(1159,328),(1156,331),(1153,334),(1150,337),(1147,340),(1144,343),(1141,346),(1138,349),(1135,352),(1132,355),(1129,358),(1126,361),(1123,364),(1120,367),(1117,370),(1114,373),(1111,376),(1108,379),(1105,382),(1102,385),(1099,388),(1096,391),(1093,394),(1090,397),(1087,400),(1084,403),(1081,406),(1078,409),(1075,412),(1072,415),(1069,418),(1066,421),(1063,424),(1060,427),(1057,430),(1054,433),(1051,436),(1048,439),(1045,442),(1042,445),(1039,448),(1036,451),(1033,454),(1030,457),(1027,460),(1024,463),(1021,466),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1015,472),(1012,475),(1009,478),(1006,481),(1003,484),(1000,487),(997,490),(994,490),(991,490),(988,490)]
                    self.path1 = [(10000,10000),(1264,223),(1261,226),(1258,229),(1255,232),(1252,235),(1249,238),(1246,241),(1243,244),(1240,247),(1237,250),(1234,253),(1231,256),(1228,259),(1225,262),(1222,265),(1219,268),(1216,271),(1213,274),(1210,277),(1207,280),(1204,283),(1201,286),(1198,289),(1195,292),(1192,295),(1189,298),(1186,301),(1183,304),(1180,307),(1177,310),(1174,313),(1171,316),(1168,319),(1165,322),(1162,325),(1159,328),(1156,331),(1153,334),(1150,337),(1147,340),(1144,343),(1141,346),(1138,349),(1135,352),(1132,355),(1129,358),(1126,361),(1123,364),(1120,367),(1117,370),(1114,373),(1111,376),(1108,379),(1105,382),(1102,385),(1099,388),(1096,391),(1093,394),(1090,397),(1087,400),(1084,403),(1081,406),(1078,409),(1075,412),(1072,415),(1069,418),(1066,421),(1063,424),(1060,427),(1057,430),(1054,433),(1051,436),(1048,439),(1045,442),(1042,445),(1039,448),(1036,451),(1033,454),(1030,457),(1027,460),(1024,463),(1021,466),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1015,472),(1012,475),(1009,478),(1006,481),(1003,484),(1000,487),(997,490),(994,490),(991,490),(988,490)]
                    self.path2v = [(10000,10000),(1264,223),(1261,226),(1258,229),(1255,232),(1252,235),(1249,238),(1246,241),(1243,244),(1240,247),(1237,250),(1234,253),(1231,256),(1228,259),(1225,262),(1222,265),(1219,268),(1216,271),(1213,274),(1210,277),(1207,280),(1204,283),(1201,286),(1198,289),(1195,292),(1192,295),(1189,298),(1186,301),(1183,304),(1180,307),(1177,310),(1174,313),(1171,316),(1168,319),(1165,322),(1162,325),(1159,328),(1156,331),(1153,334),(1150,337),(1147,340),(1144,343),(1141,346),(1138,349),(1135,352),(1132,355),(1129,358),(1126,361),(1123,364),(1120,367),(1117,370),(1114,373),(1111,376),(1108,379),(1105,382),(1102,385),(1099,388),(1096,391),(1093,394),(1090,397),(1087,400),(1084,403),(1081,406),(1078,409),(1075,412),(1072,415),(1069,418),(1066,421),(1063,424),(1060,427),(1057,430),(1054,433),(1051,436),(1048,439),(1045,442),(1042,445),(1039,448),(1036,451),(1033,454),(1030,457),(1027,460),(1024,463),(1021,466),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1015,472),(1012,475),(1009,478),(1006,481),(1003,484),(1000,487),(997,490),(997,490),(997,490),(997,490),(994,490),(991,490),(988,490),(985,490),(982,490),(979,490),(976,490),(973,490),(970,490),(967,490),(964,490),(961,490),(958,490),(955,490),(952,490),(949,490),(946,490),(943,490),(940,490),(937,490),(934,490),(931,490),(928,490),(925,490),(922,490),(919,490),(916,490),(913,490),(910,490),(907,490),(904,490),(901,490),(898,490),(895,490),(892,490),(889,490),(886,490),(883,490),(880,490),(877,490),(874,490),(871,493),(868,496),(865,499),(862,502),(859,505),(856,508),(853,511),(850,514),(847,517),(844,520),(841,523),(838,526),(835,529),(832,532),(829,535)]
                    self.path3v = [(10000,10000),(1264,223),(1261,226),(1258,229),(1255,232),(1252,235),(1249,238),(1246,241),(1243,244),(1240,247),(1237,250),(1234,253),(1231,256),(1228,259),(1225,262),(1222,265),(1219,268),(1216,271),(1213,274),(1210,277),(1207,280),(1204,283),(1201,286),(1198,289),(1195,292),(1192,295),(1189,298),(1186,301),(1183,304),(1180,307),(1177,310),(1174,313),(1171,316),(1168,319),(1165,322),(1162,325),(1159,328),(1156,331),(1153,334),(1150,337),(1147,340),(1144,343),(1141,346),(1138,349),(1135,352),(1132,355),(1129,358),(1126,361),(1123,364),(1120,367),(1117,370),(1114,373),(1111,376),(1108,379),(1105,382),(1102,385),(1099,388),(1096,391),(1093,394),(1090,397),(1087,400),(1084,403),(1081,406),(1078,409),(1075,412),(1072,415),(1069,418),(1066,421),(1063,424),(1060,427),(1057,430),(1054,433),(1051,436),(1048,439),(1045,442),(1042,445),(1039,448),(1036,451),(1033,454),(1030,457),(1027,460),(1024,463),(1021,466),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1018,469),(1015,472),(1012,475),(1009,478),(1006,481),(1003,484),(1000,487),(997,490),(997,490),(997,490),(997,490),(994,490),(991,490),(988,490),(985,490),(982,490),(979,490),(976,490),(973,490),(970,490),(967,490),(964,490),(961,490),(958,490),(955,490),(952,490),(949,490),(946,490),(943,490),(940,490),(937,490),(934,490),(931,490),(928,490),(925,490),(922,490),(919,490),(916,490),(913,490),(910,490),(907,490),(904,490),(901,490),(898,490),(895,490),(892,490),(889,490),(886,490),(883,490),(880,490),(877,490),(874,490),(871,493),(868,496),(865,499),(862,502),(859,505),(856,508),(853,511),(850,514),(847,517),(844,520),(841,523),(838,526),(835,529),(832,532),(829,535),(826,538),(823,541),(820,544),(817,547),(814,550),(811,553),(808,556),(805,559),(802,562),(799,565),(796,568),(793,571),(790,574),(787,577),(784,580),(781,583),(778,586),(775,589),(772,592),(769,595),(766,598),(763,601),(760,604),(757,607),(754,610),(751,613),(748,616),(745,619),(742,622),(739,625)]
                    self.path2d = [(10000,10000),(1264,223),(1261,226),(1258,229),(1255,232),(1252,235),(1249,238),(1246,241),(1243,244),(1240,247),(1237,250),(1234,253),(1231,256),(1228,259),(1225,262),(1222,265),(1219,268),(1216,271),(1213,274),(1210,277),(1207,280),(1204,283),(1201,286),(1198,289),(1195,292),(1192,295),(1189,298),(1186,301),(1183,304),(1180,307),(1177,310),(1174,313),(1171,316),(1168,319),(1165,322),(1162,325),(1159,328),(1156,331)]
                    self.path3d = [(10000,10000),(1264,223),(1261,226),(1258,229),(1255,232),(1252,235),(1249,238),(1246,241),(1243,244),(1240,247)]

                    if not self.cont:
                        self.x = self.path[0][0]
                        self.y = self.path[0][1]
                        self.cont = 1
                elif self.posicion == 2:
                    print("2 mid")
                    self.path = [(10000,10000),(1302,256),(1299,259),(1296,262),(1293,265),(1290,268),(1287,271),(1284,274),(1281,277),(1278,280),(1275,283),(1272,286),(1269,289),(1266,292),(1263,295),(1260,298),(1257,301),(1254,304),(1251,307),(1248,310),(1245,313),(1242,316),(1239,319),(1236,322),(1233,325),(1230,328),(1227,331),(1224,334),(1221,337),(1218,340),(1215,343),(1212,346),(1209,349),(1206,352),(1203,355),(1200,358),(1197,361),(1194,364),(1191,367),(1188,370),(1185,373),(1182,376),(1179,379),(1176,382),(1173,385),(1170,388),(1167,391),(1164,394),(1161,397),(1158,400),(1155,403),(1152,406),(1149,409),(1146,412),(1143,415),(1140,418),(1137,421),(1134,424),(1131,427),(1128,430),(1125,433),(1122,436),(1119,439),(1116,442),(1113,445),(1110,448),(1107,451),(1104,454),(1101,457),(1098,460),(1095,463),(1092,466),(1089,469),(1086,472),(1083,475),(1080,478),(1077,481),(1074,484),(1071,487),(1068,490),(1065,493),(1062,496),(1059,499),(1056,502),(1053,505),(1050,508),(1047,511),(1044,514),(1041,517),(1038,520),(1035,523),(1032,526),(1029,529),(1026,532),(1023,535),(1020,538),(1017,541),(1014,544),(1011,547),(1008,550),(1005,553),(1002,556),(999,559),(996,562),(993,562),(990,562),(987,562)]
                    self.path1 = [(10000,10000),(1302,256),(1299,259),(1296,262),(1293,265),(1290,268),(1287,271),(1284,274),(1281,277),(1278,280),(1275,283),(1272,286),(1269,289),(1266,292),(1263,295),(1260,298),(1257,301),(1254,304),(1251,307),(1248,310),(1245,313),(1242,316),(1239,319),(1236,322),(1233,325),(1230,328),(1227,331),(1224,334),(1221,337),(1218,340),(1215,343),(1212,346),(1209,349),(1206,352),(1203,355),(1200,358),(1197,361),(1194,364),(1191,367),(1188,370),(1185,373),(1182,376),(1179,379),(1176,382),(1173,385),(1170,388),(1167,391),(1164,394),(1161,397),(1158,400),(1155,403),(1152,406),(1149,409),(1146,412),(1143,415),(1140,418),(1137,421),(1134,424),(1131,427),(1128,430),(1125,433),(1122,436),(1119,439),(1116,442),(1113,445),(1110,448),(1107,451),(1104,454),(1101,457),(1098,460),(1095,463),(1092,466),(1089,469),(1086,472),(1083,475),(1080,478),(1077,481),(1074,484),(1071,487),(1068,490),(1065,493),(1062,496),(1059,499),(1056,502),(1053,505),(1050,508),(1047,511),(1044,514),(1041,517),(1038,520),(1035,523),(1032,526),(1029,529),(1026,532),(1023,535),(1020,538),(1017,541),(1014,544),(1011,547),(1008,550),(1005,553),(1002,556),(999,559),(996,562),(993,562),(990,562),(987,562)]
                    self.path2v = [(10000,10000),(1302,256),(1299,259),(1296,262),(1293,265),(1290,268),(1287,271),(1284,274),(1281,277),(1278,280),(1275,283),(1272,286),(1269,289),(1266,292),(1263,295),(1260,298),(1257,301),(1254,304),(1251,307),(1248,310),(1245,313),(1242,316),(1239,319),(1236,322),(1233,325),(1230,328),(1227,331),(1224,334),(1221,337),(1218,340),(1215,343),(1212,346),(1209,349),(1206,352),(1203,355),(1200,358),(1197,361),(1194,364),(1191,367),(1188,370),(1185,373),(1182,376),(1179,379),(1176,382),(1173,385),(1170,388),(1167,391),(1164,394),(1161,397),(1158,400),(1155,403),(1152,406),(1149,409),(1146,412),(1143,415),(1140,418),(1137,421),(1134,424),(1131,427),(1128,430),(1125,433),(1122,436),(1119,439),(1116,442),(1113,445),(1110,448),(1107,451),(1104,454),(1101,457),(1098,460),(1095,463),(1092,466),(1089,469),(1086,472),(1083,475),(1080,478),(1077,481),(1074,484),(1071,487),(1068,490),(1065,493),(1062,496),(1059,499),(1056,502),(1053,505),(1050,508),(1047,511),(1044,514),(1041,517),(1038,520),(1035,523),(1032,526),(1029,529),(1026,532),(1023,535),(1020,538),(1017,541),(1014,544),(1011,547),(1008,550),(1005,553),(1002,556),(999,559),(996,562),(996,562),(996,562),(996,562),(993,562),(990,562),(987,562),(984,562),(981,562),(978,562),(975,562),(972,562),(969,562),(966,562),(963,562),(960,562),(957,562),(954,562),(951,562),(948,562),(945,562),(942,562),(939,562),(936,562),(933,562),(930,562),(927,562),(924,562),(921,562),(918,562),(915,562),(912,562),(909,562),(906,562),(903,562),(900,562),(900,562),(900,562),(900,562),(900,562),(900,562),(900,562),(900,562),(900,562),(900,562),(900,562),(900,562),(900,562),(897,562),(894,562),(891,562),(888,562),(885,562),(882,562),(879,562),(876,562),(873,562),(870,562),(867,562),(864,565)]
                    self.path3v = [(10000,10000),(1302,256),(1299,259),(1296,262),(1293,265),(1290,268),(1287,271),(1284,274),(1281,277),(1278,280),(1275,283),(1272,286),(1269,289),(1266,292),(1263,295),(1260,298),(1257,301),(1254,304),(1251,307),(1248,310),(1245,313),(1242,316),(1239,319),(1236,322),(1233,325),(1230,328),(1227,331),(1224,334),(1221,337),(1218,340),(1215,343),(1212,346),(1209,349),(1206,352),(1203,355),(1200,358),(1197,361),(1194,364),(1191,367),(1188,370),(1185,373),(1182,376),(1179,379),(1176,382),(1173,385),(1170,388),(1167,391),(1164,394),(1161,397),(1158,400),(1155,403),(1152,406),(1149,409),(1146,412),(1143,415),(1140,418),(1137,421),(1134,424),(1131,427),(1128,430),(1125,433),(1122,436),(1119,439),(1116,442),(1113,445),(1110,448),(1107,451),(1104,454),(1101,457),(1098,460),(1095,463),(1092,466),(1089,469),(1086,472),(1083,475),(1080,478),(1077,481),(1074,484),(1071,487),(1068,490),(1065,493),(1062,496),(1059,499),(1056,502),(1053,505),(1050,508),(1047,511),(1044,514),(1041,517),(1038,520),(1035,523),(1032,526),(1029,529),(1026,532),(1023,535),(1020,538),(1017,541),(1014,544),(1011,547),(1008,550),(1005,553),(1002,556),(999,559),(996,562),(996,562),(996,562),(996,562),(993,562),(990,562),(987,562),(984,562),(981,562),(978,562),(975,562),(972,562),(969,562),(966,562),(963,562),(960,562),(957,562),(954,562),(951,562),(948,562),(945,562),(942,562),(939,562),(936,562),(933,562),(930,562),(927,562),(924,562),(921,562),(918,562),(915,562),(912,562),(909,562),(906,562),(903,562),(900,562),(900,562),(900,562),(900,562),(900,562),(900,562),(900,562),(900,562),(900,562),(900,562),(900,562),(900,562),(900,562),(897,562),(894,562),(891,562),(888,562),(885,562),(882,562),(879,562),(876,562),(873,562),(870,562),(867,562),(864,565),(861,568),(858,571),(855,574),(852,577),(849,580),(846,583),(843,586),(840,589),(837,592),(834,595),(831,598),(828,601),(825,604),(822,607),(819,610),(816,613),(813,616),(810,619),(807,622),(804,625),(801,628),(798,631),(795,634),(792,637),(789,640),(786,643),(783,646),(780,649),(777,652),(774,655),(771,658),(768,661)]
                    self.path2d = [(10000,10000),(1302,256),(1299,259),(1296,262),(1293,265),(1290,268),(1287,271),(1284,274),(1281,277),(1278,280),(1275,283),(1272,286),(1269,289),(1266,292),(1263,295),(1260,298),(1257,301),(1254,304),(1251,307),(1248,310),(1245,313),(1242,316),(1239,319),(1236,322),(1233,325),(1230,328),(1227,331),(1224,334),(1221,337),(1218,340),(1215,343),(1212,346),(1209,349),(1206,352),(1203,355),(1200,358),(1197,361),(1194,364)]
                    self.path3d = [(10000,10000),(1302,256),(1299,259),(1296,262),(1293,265),(1290,268),(1287,271),(1284,274),(1281,277),(1278,280)]

                    if not self.cont:
                        self.x = self.path[0][0]
                        self.y = self.path[0][1]
                        self.cont = 1

                cursor.execute('SELECT estado FROM torres WHERE nombre = "torre_mid_1_derecha"')
                resul = cursor.fetchall()
                for r in resul:
                    self.torre_1_derecha = r[0]
                cursor.execute('SELECT estado FROM torres WHERE nombre = "torre_mid_2_derecha"')
                resul = cursor.fetchall()
                for r in resul:
                    self.torre_2_derecha = r[0]
                cursor.execute('SELECT estado FROM torres WHERE nombre = "torre_mid_1_izquierda"')
                resul = cursor.fetchall()
                for r in resul:
                    self.torre_1_izquierda = r[0]
                cursor.execute('SELECT estado FROM torres WHERE nombre = "torre_mid_2_izquierda"')
                resul = cursor.fetchall()
                for r in resul:
                    self.torre_2_izquierda = r[0]
            elif self.linea == 'bot':
                if self.posicion == 1:
                    print("1 bot")
                    self.path = [(10000,10000),(1348,241),(1348,244),(1348,247),(1348,250),(1348,253),(1348,256),(1348,259),(1348,262),(1348,265),(1348,268),(1348,271),(1348,274),(1348,277),(1348,280),(1348,283),(1348,286),(1348,289),(1348,292),(1348,295),(1348,298),(1348,301),(1348,304),(1348,307),(1348,310),(1348,313),(1348,316),(1348,319),(1348,322),(1348,325),(1348,328),(1348,331),(1348,334),(1348,337),(1348,340),(1348,343),(1348,346),(1348,349),(1348,352),(1348,355),(1348,358),(1348,361),(1348,364),(1348,367),(1348,370),(1348,373),(1348,376),(1348,379),(1348,382),(1348,385),(1348,388),(1348,391),(1348,394),(1348,397),(1348,400),(1348,403),(1348,406),(1348,409),(1348,412),(1348,415),(1348,418),(1348,421),(1348,424),(1348,427),(1348,430),(1348,433),(1348,436),(1348,439),(1348,442),(1348,445),(1348,448),(1348,451),(1348,454),(1348,457),(1348,460),(1348,463),(1348,466),(1348,469),(1348,472),(1348,475),(1348,478),(1348,481),(1348,484),(1348,487),(1348,490),(1348,493),(1348,496),(1348,499),(1348,502),(1348,505),(1348,508),(1348,511),(1348,514),(1348,517),(1348,520),(1348,523),(1348,526),(1348,529),(1348,532),(1348,535),(1348,538),(1348,541),(1348,544),(1348,547),(1348,550),(1348,553),(1348,556),(1348,559),(1348,562),(1348,565),(1348,568),(1348,571),(1348,574),(1348,577),(1348,580),(1348,583),(1348,586),(1348,589),(1348,592),(1348,595),(1348,598),(1348,601),(1348,604),(1348,607),(1348,610),(1348,613),(1348,616),(1348,619),(1348,622),(1348,625),(1348,628),(1348,631),(1348,634),(1348,637),(1348,640),(1348,643),(1348,646),(1348,649),(1348,652),(1348,655),(1348,658),(1348,661),(1348,664),(1348,667),(1348,670),(1348,673),(1348,676),(1348,679),(1348,682),(1348,685),(1348,688),(1348,691),(1348,694),(1348,697),(1348,700),(1348,703),(1348,706),(1348,709),(1348,712),(1348,715),(1348,718),(1348,721),(1348,724),(1348,724),(1348,724),(1348,724),(1348,724),(1348,724),(1348,724),(1348,724),(1348,724),(1345,727)]
                    self.path1 = [(10000,10000),(1348,241),(1348,244),(1348,247),(1348,250),(1348,253),(1348,256),(1348,259),(1348,262),(1348,265),(1348,268),(1348,271),(1348,274),(1348,277),(1348,280),(1348,283),(1348,286),(1348,289),(1348,292),(1348,295),(1348,298),(1348,301),(1348,304),(1348,307),(1348,310),(1348,313),(1348,316),(1348,319),(1348,322),(1348,325),(1348,328),(1348,331),(1348,334),(1348,337),(1348,340),(1348,343),(1348,346),(1348,349),(1348,352),(1348,355),(1348,358),(1348,361),(1348,364),(1348,367),(1348,370),(1348,373),(1348,376),(1348,379),(1348,382),(1348,385),(1348,388),(1348,391),(1348,394),(1348,397),(1348,400),(1348,403),(1348,406),(1348,409),(1348,412),(1348,415),(1348,418),(1348,421),(1348,424),(1348,427),(1348,430),(1348,433),(1348,436),(1348,439),(1348,442),(1348,445),(1348,448),(1348,451),(1348,454),(1348,457),(1348,460),(1348,463),(1348,466),(1348,469),(1348,472),(1348,475),(1348,478),(1348,481),(1348,484),(1348,487),(1348,490),(1348,493),(1348,496),(1348,499),(1348,502),(1348,505),(1348,508),(1348,511),(1348,514),(1348,517),(1348,520),(1348,523),(1348,526),(1348,529),(1348,532),(1348,535),(1348,538),(1348,541),(1348,544),(1348,547),(1348,550),(1348,553),(1348,556),(1348,559),(1348,562),(1348,565),(1348,568),(1348,571),(1348,574),(1348,577),(1348,580),(1348,583),(1348,586),(1348,589),(1348,592),(1348,595),(1348,598),(1348,601),(1348,604),(1348,607),(1348,610),(1348,613),(1348,616),(1348,619),(1348,622),(1348,625),(1348,628),(1348,631),(1348,634),(1348,637),(1348,640),(1348,643),(1348,646),(1348,649),(1348,652),(1348,655),(1348,658),(1348,661),(1348,664),(1348,667),(1348,670),(1348,673),(1348,676),(1348,679),(1348,682),(1348,685),(1348,688),(1348,691),(1348,694),(1348,697),(1348,700),(1348,703),(1348,706),(1348,709),(1348,712),(1348,715),(1348,718),(1348,721),(1348,724),(1348,724),(1348,724),(1348,724),(1348,724),(1348,724),(1348,724),(1348,724),(1348,724),(1345,727)]
                    self.path2v = [(10000,10000),(1348,241),(1348,244),(1348,247),(1348,250),(1348,253),(1348,256),(1348,259),(1348,262),(1348,265),(1348,268),(1348,271),(1348,274),(1348,277),(1348,280),(1348,283),(1348,286),(1348,289),(1348,292),(1348,295),(1348,298),(1348,301),(1348,304),(1348,307),(1348,310),(1348,313),(1348,316),(1348,319),(1348,322),(1348,325),(1348,328),(1348,331),(1348,334),(1348,337),(1348,340),(1348,343),(1348,346),(1348,349),(1348,352),(1348,355),(1348,358),(1348,361),(1348,364),(1348,367),(1348,370),(1348,373),(1348,376),(1348,379),(1348,382),(1348,385),(1348,388),(1348,391),(1348,394),(1348,397),(1348,400),(1348,403),(1348,406),(1348,409),(1348,412),(1348,415),(1348,418),(1348,421),(1348,424),(1348,427),(1348,430),(1348,433),(1348,436),(1348,439),(1348,442),(1348,445),(1348,448),(1348,451),(1348,454),(1348,457),(1348,460),(1348,463),(1348,466),(1348,469),(1348,472),(1348,475),(1348,478),(1348,481),(1348,484),(1348,487),(1348,490),(1348,493),(1348,496),(1348,499),(1348,502),(1348,505),(1348,508),(1348,511),(1348,514),(1348,517),(1348,520),(1348,523),(1348,526),(1348,529),(1348,532),(1348,535),(1348,538),(1348,541),(1348,544),(1348,547),(1348,550),(1348,553),(1348,556),(1348,559),(1348,562),(1348,565),(1348,568),(1348,571),(1348,574),(1348,577),(1348,580),(1348,583),(1348,586),(1348,589),(1348,592),(1348,595),(1348,598),(1348,601),(1348,604),(1348,607),(1348,610),(1348,613),(1348,616),(1348,619),(1348,622),(1348,625),(1348,628),(1348,631),(1348,634),(1348,637),(1348,640),(1348,643),(1348,646),(1348,649),(1348,652),(1348,655),(1348,658),(1348,661),(1348,664),(1348,667),(1348,670),(1348,673),(1348,676),(1348,679),(1348,682),(1348,685),(1348,688),(1348,691),(1348,694),(1348,697),(1348,700),(1348,703),(1348,706),(1348,709),(1348,712),(1348,715),(1348,718),(1348,721),(1348,724),(1348,724),(1348,724),(1348,724),(1348,724),(1348,724),(1348,724),(1348,724),(1348,724),(1345,727),(1342,730),(1339,733),(1336,736),(1333,739),(1330,742),(1327,745),(1324,748),(1321,751),(1318,754),(1315,757),(1312,760),(1309,763),(1306,766),(1303,769),(1300,772),(1297,775),(1294,778),(1291,781),(1288,784),(1285,787),(1282,790),(1279,793),(1276,796),(1273,799),(1270,802),(1267,805),(1264,808),(1261,811),(1258,814),(1255,817),(1252,820),(1249,823),(1246,826),(1243,829),(1240,832),(1237,835),(1234,838),(1231,841),(1228,844),(1225,847),(1222,850),(1219,853),(1216,856),(1213,859),(1213,859),(1213,859),(1213,859),(1213,859),(1213,859),(1213,859),(1213,859),(1213,859),(1213,859),(1213,859),(1213,859),(1213,859),(1213,859),(1210,859),(1207,859),(1204,859),(1201,859),(1198,859),(1195,859),(1192,859),(1189,859),(1186,859),(1183,859),(1180,859),(1177,859),(1174,859),(1171,859),(1168,859),(1165,859),(1162,859),(1159,859),(1156,859),(1153,859),(1150,859),(1147,859),(1144,859),(1141,859),(1138,859),(1135,859),(1132,859),(1129,859),(1126,859),(1123,859),(1120,859),(1117,859),(1114,859),(1111,859),(1108,859),(1105,859),(1102,859),(1099,859),(1096,859),(1093,859),(1090,859),(1087,859),(1084,859),(1081,859),(1078,859),(1075,859),(1072,859),(1069,859),(1066,859),(1063,859),(1060,859),(1057,859),(1054,859),(1051,859),(1048,859),(1045,859),(1042,859),(1039,859),(1036,859),(1033,859),(1030,859)]
                    self.path3v = [(10000,10000),(1348,241),(1348,244),(1348,247),(1348,250),(1348,253),(1348,256),(1348,259),(1348,262),(1348,265),(1348,268),(1348,271),(1348,274),(1348,277),(1348,280),(1348,283),(1348,286),(1348,289),(1348,292),(1348,295),(1348,298),(1348,301),(1348,304),(1348,307),(1348,310),(1348,313),(1348,316),(1348,319),(1348,322),(1348,325),(1348,328),(1348,331),(1348,334),(1348,337),(1348,340),(1348,343),(1348,346),(1348,349),(1348,352),(1348,355),(1348,358),(1348,361),(1348,364),(1348,367),(1348,370),(1348,373),(1348,376),(1348,379),(1348,382),(1348,385),(1348,388),(1348,391),(1348,394),(1348,397),(1348,400),(1348,403),(1348,406),(1348,409),(1348,412),(1348,415),(1348,418),(1348,421),(1348,424),(1348,427),(1348,430),(1348,433),(1348,436),(1348,439),(1348,442),(1348,445),(1348,448),(1348,451),(1348,454),(1348,457),(1348,460),(1348,463),(1348,466),(1348,469),(1348,472),(1348,475),(1348,478),(1348,481),(1348,484),(1348,487),(1348,490),(1348,493),(1348,496),(1348,499),(1348,502),(1348,505),(1348,508),(1348,511),(1348,514),(1348,517),(1348,520),(1348,523),(1348,526),(1348,529),(1348,532),(1348,535),(1348,538),(1348,541),(1348,544),(1348,547),(1348,550),(1348,553),(1348,556),(1348,559),(1348,562),(1348,565),(1348,568),(1348,571),(1348,574),(1348,577),(1348,580),(1348,583),(1348,586),(1348,589),(1348,592),(1348,595),(1348,598),(1348,601),(1348,604),(1348,607),(1348,610),(1348,613),(1348,616),(1348,619),(1348,622),(1348,625),(1348,628),(1348,631),(1348,634),(1348,637),(1348,640),(1348,643),(1348,646),(1348,649),(1348,652),(1348,655),(1348,658),(1348,661),(1348,664),(1348,667),(1348,670),(1348,673),(1348,676),(1348,679),(1348,682),(1348,685),(1348,688),(1348,691),(1348,694),(1348,697),(1348,700),(1348,703),(1348,706),(1348,709),(1348,712),(1348,715),(1348,718),(1348,721),(1348,724),(1348,724),(1348,724),(1348,724),(1348,724),(1348,724),(1348,724),(1348,724),(1348,724),(1345,727),(1342,730),(1339,733),(1336,736),(1333,739),(1330,742),(1327,745),(1324,748),(1321,751),(1318,754),(1315,757),(1312,760),(1309,763),(1306,766),(1303,769),(1300,772),(1297,775),(1294,778),(1291,781),(1288,784),(1285,787),(1282,790),(1279,793),(1276,796),(1273,799),(1270,802),(1267,805),(1264,808),(1261,811),(1258,814),(1255,817),(1252,820),(1249,823),(1246,826),(1243,829),(1240,832),(1237,835),(1234,838),(1231,841),(1228,844),(1225,847),(1222,850),(1219,853),(1216,856),(1213,859),(1213,859),(1213,859),(1213,859),(1213,859),(1213,859),(1213,859),(1213,859),(1213,859),(1213,859),(1213,859),(1213,859),(1213,859),(1213,859),(1210,859),(1207,859),(1204,859),(1201,859),(1198,859),(1195,859),(1192,859),(1189,859),(1186,859),(1183,859),(1180,859),(1177,859),(1174,859),(1171,859),(1168,859),(1165,859),(1162,859),(1159,859),(1156,859),(1153,859),(1150,859),(1147,859),(1144,859),(1141,859),(1138,859),(1135,859),(1132,859),(1129,859),(1126,859),(1123,859),(1120,859),(1117,859),(1114,859),(1111,859),(1108,859),(1105,859),(1102,859),(1099,859),(1096,859),(1093,859),(1090,859),(1087,859),(1084,859),(1081,859),(1078,859),(1075,859),(1072,859),(1069,859),(1066,859),(1063,859),(1060,859),(1057,859),(1054,859),(1051,859),(1048,859),(1045,859),(1042,859),(1039,859),(1036,859),(1033,859),(1030,859),(1027,859),(1024,859),(1021,859),(1018,859),(1015,859),(1012,859),(1009,859),(1006,859),(1003,859),(1000,859),(997,859),(994,859),(991,859),(988,859),(985,859),(982,859),(979,859),(976,859),(973,859),(970,859),(967,859),(964,859),(961,859),(958,859),(955,859),(952,859),(949,859),(946,859),(943,859),(940,859),(937,859),(934,859),(931,859),(928,859),(925,859),(922,859),(919,859),(916,859),(913,859),(910,859),(907,859),(904,859),(901,859),(898,859),(895,859),(892,859),(889,859),(886,859),(883,859),(880,859),(877,859),(874,859),(871,859),(868,859),(865,859),(862,859),(859,859),(856,859),(853,859),(850,859),(847,859),(844,859),(841,859),(838,859),(835,859)]
                    self.path2d = [(10000,10000),(1348,241),(1348,244),(1348,247),(1348,250),(1348,253),(1348,256),(1348,259),(1348,262),(1348,265),(1348,268),(1348,271),(1348,274),(1348,277),(1348,280),(1348,283),(1348,286),(1348,289),(1348,292),(1348,295),(1348,298),(1348,301),(1348,304),(1348,307),(1348,310),(1348,313),(1348,316),(1348,319),(1348,322),(1348,325),(1348,328),(1348,331),(1348,334),(1348,337),(1348,340),(1348,343),(1348,346),(1348,349),(1348,352),(1348,355),(1348,358),(1348,361),(1348,364),(1348,367),(1348,370),(1348,373),(1348,376),(1348,379),(1348,382),(1348,385),(1348,388),(1348,391),(1348,394),(1348,397),(1348,400),(1348,403),(1348,406),(1348,409),(1348,412),(1348,415),(1348,418),(1348,421),(1348,424),(1348,427),(1348,430),(1348,433),(1348,436)]
                    self.path3d = [(10000,10000),(1348,241),(1348,244),(1348,247),(1348,250),(1348,253),(1348,256)]
                    

                    if not self.cont:
                        self.x = self.path[0][0]
                        self.y = self.path[0][1]
                        self.cont = 1
                elif self.posicion == 2:
                    print("2 bot")
                    self.path = [(10000,10000),(1400,241),(1400,244),(1400,247),(1400,250),(1400,253),(1400,256),(1400,259),(1400,262),(1400,265),(1400,268),(1400,271),(1400,274),(1400,277),(1400,280),(1400,283),(1400,286),(1400,289),(1400,292),(1400,295),(1400,298),(1400,301),(1400,304),(1400,307),(1400,310),(1400,313),(1400,316),(1400,319),(1400,322),(1400,325),(1400,328),(1400,331),(1400,334),(1400,337),(1400,340),(1400,343),(1400,346),(1400,349),(1400,352),(1400,355),(1400,358),(1400,361),(1400,364),(1400,367),(1400,370),(1400,373),(1400,376),(1400,379),(1400,382),(1400,385),(1400,388),(1400,391),(1400,394),(1400,397),(1400,400),(1400,403),(1400,406),(1400,409),(1400,412),(1400,415),(1400,418),(1400,421),(1400,424),(1400,427),(1400,430),(1400,433),(1400,436),(1400,439),(1400,442),(1400,445),(1400,448),(1400,451),(1400,454),(1400,457),(1400,460),(1400,463),(1400,466),(1400,469),(1400,472),(1400,475),(1400,478),(1400,481),(1400,484),(1400,487),(1400,490),(1400,493),(1400,496),(1400,499),(1400,502),(1400,505),(1400,508),(1400,511),(1400,514),(1400,517),(1400,520),(1400,523),(1400,526),(1400,529),(1400,532),(1400,535),(1400,538),(1400,541),(1400,544),(1400,547),(1400,550),(1400,553),(1400,556),(1400,559),(1400,562),(1400,565),(1400,568),(1400,571),(1400,574),(1400,577),(1400,580),(1400,583),(1400,586),(1400,589),(1400,592),(1400,595),(1400,598),(1400,601),(1400,604),(1400,607),(1400,610),(1400,613),(1400,616),(1400,619),(1400,622),(1400,625),(1400,628),(1400,631),(1400,634),(1400,637),(1400,640),(1400,643),(1400,646),(1400,649),(1400,652),(1400,655),(1400,658),(1400,661),(1400,664),(1400,667),(1400,670),(1400,673),(1400,676),(1400,679),(1400,682),(1400,685),(1400,688),(1400,691),(1400,694),(1400,697),(1400,700),(1400,703),(1400,706),(1400,709),(1400,712),(1400,715),(1400,718),(1400,721),(1400,724),(1400,727),(1400,730),(1400,733),(1400,736),(1400,739),(1397,742),(1394,745),(1391,748),(1388,751),(1385,754)]
                    self.path1 = [(10000,10000),(1400,241),(1400,244),(1400,247),(1400,250),(1400,253),(1400,256),(1400,259),(1400,262),(1400,265),(1400,268),(1400,271),(1400,274),(1400,277),(1400,280),(1400,283),(1400,286),(1400,289),(1400,292),(1400,295),(1400,298),(1400,301),(1400,304),(1400,307),(1400,310),(1400,313),(1400,316),(1400,319),(1400,322),(1400,325),(1400,328),(1400,331),(1400,334),(1400,337),(1400,340),(1400,343),(1400,346),(1400,349),(1400,352),(1400,355),(1400,358),(1400,361),(1400,364),(1400,367),(1400,370),(1400,373),(1400,376),(1400,379),(1400,382),(1400,385),(1400,388),(1400,391),(1400,394),(1400,397),(1400,400),(1400,403),(1400,406),(1400,409),(1400,412),(1400,415),(1400,418),(1400,421),(1400,424),(1400,427),(1400,430),(1400,433),(1400,436),(1400,439),(1400,442),(1400,445),(1400,448),(1400,451),(1400,454),(1400,457),(1400,460),(1400,463),(1400,466),(1400,469),(1400,472),(1400,475),(1400,478),(1400,481),(1400,484),(1400,487),(1400,490),(1400,493),(1400,496),(1400,499),(1400,502),(1400,505),(1400,508),(1400,511),(1400,514),(1400,517),(1400,520),(1400,523),(1400,526),(1400,529),(1400,532),(1400,535),(1400,538),(1400,541),(1400,544),(1400,547),(1400,550),(1400,553),(1400,556),(1400,559),(1400,562),(1400,565),(1400,568),(1400,571),(1400,574),(1400,577),(1400,580),(1400,583),(1400,586),(1400,589),(1400,592),(1400,595),(1400,598),(1400,601),(1400,604),(1400,607),(1400,610),(1400,613),(1400,616),(1400,619),(1400,622),(1400,625),(1400,628),(1400,631),(1400,634),(1400,637),(1400,640),(1400,643),(1400,646),(1400,649),(1400,652),(1400,655),(1400,658),(1400,661),(1400,664),(1400,667),(1400,670),(1400,673),(1400,676),(1400,679),(1400,682),(1400,685),(1400,688),(1400,691),(1400,694),(1400,697),(1400,700),(1400,703),(1400,706),(1400,709),(1400,712),(1400,715),(1400,718),(1400,721),(1400,724),(1400,727),(1400,730),(1400,733),(1400,736),(1400,739),(1397,742),(1394,745),(1391,748),(1388,751),(1385,754)]
                    self.path2v = [(10000,10000),(1400,241),(1400,244),(1400,247),(1400,250),(1400,253),(1400,256),(1400,259),(1400,262),(1400,265),(1400,268),(1400,271),(1400,274),(1400,277),(1400,280),(1400,283),(1400,286),(1400,289),(1400,292),(1400,295),(1400,298),(1400,301),(1400,304),(1400,307),(1400,310),(1400,313),(1400,316),(1400,319),(1400,322),(1400,325),(1400,328),(1400,331),(1400,334),(1400,337),(1400,340),(1400,343),(1400,346),(1400,349),(1400,352),(1400,355),(1400,358),(1400,361),(1400,364),(1400,367),(1400,370),(1400,373),(1400,376),(1400,379),(1400,382),(1400,385),(1400,388),(1400,391),(1400,394),(1400,397),(1400,400),(1400,403),(1400,406),(1400,409),(1400,412),(1400,415),(1400,418),(1400,421),(1400,424),(1400,427),(1400,430),(1400,433),(1400,436),(1400,439),(1400,442),(1400,445),(1400,448),(1400,451),(1400,454),(1400,457),(1400,460),(1400,463),(1400,466),(1400,469),(1400,472),(1400,475),(1400,478),(1400,481),(1400,484),(1400,487),(1400,490),(1400,493),(1400,496),(1400,499),(1400,502),(1400,505),(1400,508),(1400,511),(1400,514),(1400,517),(1400,520),(1400,523),(1400,526),(1400,529),(1400,532),(1400,535),(1400,538),(1400,541),(1400,544),(1400,547),(1400,550),(1400,553),(1400,556),(1400,559),(1400,562),(1400,565),(1400,568),(1400,571),(1400,574),(1400,577),(1400,580),(1400,583),(1400,586),(1400,589),(1400,592),(1400,595),(1400,598),(1400,601),(1400,604),(1400,607),(1400,610),(1400,613),(1400,616),(1400,619),(1400,622),(1400,625),(1400,628),(1400,631),(1400,634),(1400,637),(1400,640),(1400,643),(1400,646),(1400,649),(1400,652),(1400,655),(1400,658),(1400,661),(1400,664),(1400,667),(1400,670),(1400,673),(1400,676),(1400,679),(1400,682),(1400,685),(1400,688),(1400,691),(1400,694),(1400,697),(1400,700),(1400,703),(1400,706),(1400,709),(1400,712),(1400,715),(1400,718),(1400,721),(1400,724),(1400,727),(1400,730),(1400,733),(1400,736),(1400,739),(1397,742),(1394,745),(1391,748),(1388,751),(1385,754),(1382,757),(1379,760),(1376,763),(1373,766),(1370,769),(1367,772),(1364,775),(1361,778),(1358,781),(1355,784),(1352,787),(1349,790),(1346,793),(1343,796),(1340,799),(1337,802),(1334,805),(1331,808),(1328,811),(1325,814),(1322,817),(1319,820),(1316,823),(1313,826),(1310,829),(1307,832),(1304,835),(1301,838),(1298,841),(1295,844),(1292,847),(1289,850),(1286,853),(1283,856),(1280,859),(1277,862),(1274,865),(1271,868),(1268,871),(1265,874),(1262,877),(1259,880),(1256,883),(1253,886),(1250,889),(1247,892),(1244,895),(1241,898),(1238,901),(1235,904),(1232,907),(1229,910),(1226,910),(1223,910),(1220,910),(1217,910),(1214,910),(1211,910),(1208,910),(1205,910),(1202,910),(1199,910),(1196,910),(1193,910),(1190,910),(1187,910),(1184,910),(1181,910),(1178,910),(1175,910),(1172,910),(1169,910),(1166,910),(1163,910),(1160,910),(1157,910),(1154,910),(1151,910),(1148,910),(1145,910),(1142,910),(1139,910),(1136,910),(1133,910),(1130,910),(1127,910),(1124,910),(1121,910),(1118,910),(1115,910),(1112,910),(1109,910),(1106,910),(1103,910),(1100,910),(1097,910),(1094,910),(1091,910),(1088,910),(1085,910),(1082,910),(1079,910),(1076,910),(1073,910),(1070,910),(1067,910),(1064,910),(1061,910),(1058,910),(1055,910),(1052,910),(1049,910),(1046,910),(1043,910),(1040,910),(1037,910),(1034,910),(1031,910)]
                    self.path3v = [(10000,10000),(1400,241),(1400,244),(1400,247),(1400,250),(1400,253),(1400,256),(1400,259),(1400,262),(1400,265),(1400,268),(1400,271),(1400,274),(1400,277),(1400,280),(1400,283),(1400,286),(1400,289),(1400,292),(1400,295),(1400,298),(1400,301),(1400,304),(1400,307),(1400,310),(1400,313),(1400,316),(1400,319),(1400,322),(1400,325),(1400,328),(1400,331),(1400,334),(1400,337),(1400,340),(1400,343),(1400,346),(1400,349),(1400,352),(1400,355),(1400,358),(1400,361),(1400,364),(1400,367),(1400,370),(1400,373),(1400,376),(1400,379),(1400,382),(1400,385),(1400,388),(1400,391),(1400,394),(1400,397),(1400,400),(1400,403),(1400,406),(1400,409),(1400,412),(1400,415),(1400,418),(1400,421),(1400,424),(1400,427),(1400,430),(1400,433),(1400,436),(1400,439),(1400,442),(1400,445),(1400,448),(1400,451),(1400,454),(1400,457),(1400,460),(1400,463),(1400,466),(1400,469),(1400,472),(1400,475),(1400,478),(1400,481),(1400,484),(1400,487),(1400,490),(1400,493),(1400,496),(1400,499),(1400,502),(1400,505),(1400,508),(1400,511),(1400,514),(1400,517),(1400,520),(1400,523),(1400,526),(1400,529),(1400,532),(1400,535),(1400,538),(1400,541),(1400,544),(1400,547),(1400,550),(1400,553),(1400,556),(1400,559),(1400,562),(1400,565),(1400,568),(1400,571),(1400,574),(1400,577),(1400,580),(1400,583),(1400,586),(1400,589),(1400,592),(1400,595),(1400,598),(1400,601),(1400,604),(1400,607),(1400,610),(1400,613),(1400,616),(1400,619),(1400,622),(1400,625),(1400,628),(1400,631),(1400,634),(1400,637),(1400,640),(1400,643),(1400,646),(1400,649),(1400,652),(1400,655),(1400,658),(1400,661),(1400,664),(1400,667),(1400,670),(1400,673),(1400,676),(1400,679),(1400,682),(1400,685),(1400,688),(1400,691),(1400,694),(1400,697),(1400,700),(1400,703),(1400,706),(1400,709),(1400,712),(1400,715),(1400,718),(1400,721),(1400,724),(1400,727),(1400,730),(1400,733),(1400,736),(1400,739),(1397,742),(1394,745),(1391,748),(1388,751),(1385,754),(1382,757),(1379,760),(1376,763),(1373,766),(1370,769),(1367,772),(1364,775),(1361,778),(1358,781),(1355,784),(1352,787),(1349,790),(1346,793),(1343,796),(1340,799),(1337,802),(1334,805),(1331,808),(1328,811),(1325,814),(1322,817),(1319,820),(1316,823),(1313,826),(1310,829),(1307,832),(1304,835),(1301,838),(1298,841),(1295,844),(1292,847),(1289,850),(1286,853),(1283,856),(1280,859),(1277,862),(1274,865),(1271,868),(1268,871),(1265,874),(1262,877),(1259,880),(1256,883),(1253,886),(1250,889),(1247,892),(1244,895),(1241,898),(1238,901),(1235,904),(1232,907),(1229,910),(1226,910),(1223,910),(1220,910),(1217,910),(1214,910),(1211,910),(1208,910),(1205,910),(1202,910),(1199,910),(1196,910),(1193,910),(1190,910),(1187,910),(1184,910),(1181,910),(1178,910),(1175,910),(1172,910),(1169,910),(1166,910),(1163,910),(1160,910),(1157,910),(1154,910),(1151,910),(1148,910),(1145,910),(1142,910),(1139,910),(1136,910),(1133,910),(1130,910),(1127,910),(1124,910),(1121,910),(1118,910),(1115,910),(1112,910),(1109,910),(1106,910),(1103,910),(1100,910),(1097,910),(1094,910),(1091,910),(1088,910),(1085,910),(1082,910),(1079,910),(1076,910),(1073,910),(1070,910),(1067,910),(1064,910),(1061,910),(1058,910),(1055,910),(1052,910),(1049,910),(1046,910),(1043,910),(1040,910),(1037,910),(1034,910),(1031,910),(1028,910),(1025,910),(1022,910),(1019,910),(1016,910),(1013,910),(1010,910),(1007,910),(1004,910),(1001,910),(998,910),(995,910),(992,910),(989,910),(986,910),(983,910),(980,910),(977,910),(974,910),(971,910),(968,910),(965,910),(962,910),(959,910),(956,910),(953,910),(950,910),(947,910),(944,910),(941,910),(938,910),(935,910),(932,910),(929,910),(926,910),(923,910),(920,910),(917,910),(914,910),(911,910),(908,910),(905,910),(902,910),(899,910),(896,910),(893,910),(890,910),(887,910),(884,910),(881,910),(878,910),(875,910),(872,910),(869,910),(866,910),(863,910),(860,910),(857,910),(854,910),(851,910),(848,910),(845,910),(842,910),(839,910),(836,910)]
                    self.path2d = [(10000,10000),(1400,241),(1400,244),(1400,247),(1400,250),(1400,253),(1400,256),(1400,259),(1400,262),(1400,265),(1400,268),(1400,271),(1400,274),(1400,277),(1400,280),(1400,283),(1400,286),(1400,289),(1400,292),(1400,295),(1400,298),(1400,301),(1400,304),(1400,307),(1400,310),(1400,313),(1400,316),(1400,319),(1400,322),(1400,325),(1400,328),(1400,331),(1400,334),(1400,337),(1400,340),(1400,343),(1400,346),(1400,349),(1400,352),(1400,355),(1400,358),(1400,361),(1400,364),(1400,367),(1400,370),(1400,373),(1400,376),(1400,379),(1400,382),(1400,385),(1400,388),(1400,391),(1400,394),(1400,397),(1400,400),(1400,403),(1400,406),(1400,409),(1400,412),(1400,415),(1400,418),(1400,421),(1400,424),(1400,427),(1400,430),(1400,433),(1400,436)]
                    self.path3d = [(10000,10000),(1400,241),(1400,244),(1400,247),(1400,250),(1400,253),(1400,256)]

                    if not self.cont:
                        self.x = self.path[0][0]
                        self.y = self.path[0][1]
                        self.cont = 1

                cursor.execute('SELECT estado FROM torres WHERE nombre = "torre_bot_1_derecha"')
                resul = cursor.fetchall()
                for r in resul:
                    self.torre_1_derecha = r[0]
                cursor.execute('SELECT estado FROM torres WHERE nombre = "torre_bot_2_derecha"')
                resul = cursor.fetchall()
                for r in resul:
                    self.torre_2_derecha = r[0]
                cursor.execute('SELECT estado FROM torres WHERE nombre = "torre_bot_1_izquierda"')
                resul = cursor.fetchall()
                for r in resul:
                    self.torre_1_izquierda = r[0]
                cursor.execute('SELECT estado FROM torres WHERE nombre = "torre_bot_2_izquierda"')
                resul = cursor.fetchall()
                for r in resul:
                    self.torre_2_izquierda = r[0]
            elif self.linea == "":
                self.path = [(10000, 10000)]
                self.path1 = [(10000, 10000)]
                self.path2v = [(10000, 10000)]
                self.path2d = [(10000, 10000)]
                self.path3v = [(10000, 10000)]
                self.path3d = [(10000, 10000)]
            conexion.close()

            """#CAMBIAR - Esto va fuera es para poder manipular el estado de las torres
            self.torre_1_derecha = 1
            self.torre_2_derecha = 1
            self.torre_1_izquierda = 0
            self.torre_2_izquierda = 0
            #-------"""

            fase1 = 0
            if self.torre_1_derecha and self.torre_2_derecha and self.torre_1_izquierda and self.torre_2_izquierda:
                fase1 = 1
            elif not self.torre_1_derecha and self.torre_2_derecha and not self.torre_1_izquierda and self.torre_2_izquierda:
                fase1 = 1
            elif not self.torre_1_derecha and not self.torre_2_derecha and not self.torre_1_izquierda and not self.torre_2_izquierda:
                fase1 = 1

            fase3d = 0
            if not self.torre_1_derecha and not self.torre_2_derecha and self.torre_1_izquierda and self.torre_2_izquierda:
                fase3d = 1
            elif not self.torre_1_derecha and not self.torre_2_derecha and not self.torre_1_izquierda and self.torre_2_izquierda:
                fase3d = 1

            fase3v = 0
            if self.torre_1_derecha and self.torre_2_derecha and not self.torre_1_izquierda and not self.torre_2_izquierda:
                fase3v = 1
            elif not self.torre_1_derecha and self.torre_2_derecha and not self.torre_1_izquierda and not self.torre_2_izquierda:
                fase3v = 1

            #SELECCIONAR LAS IMAGENES SEGUN EL ESTADO DE LA PARTIDA
            if fase1:
                print("FASE 1")
                if self.linea == "top":
                    if self.posicion == 1:
                        print("1 top")
                        # SELECCIONADOR DE IMAGENES EN FASE 1
                        if self.x == 624 and self.y == 161:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            if self.x >= 496 and self.y <= 294:
                                self.img = self.imgs2[self.contador_animacion]
                            else:
                                self.img = self.imgs[self.contador_animacion]
                    elif self.posicion == 2:
                        print("2 top")
                        # SELECCIONADOR DE IMAGENES EN FASE 1
                        if self.x == 669 and self.y == 196 or self.x == 690 and self.y == 175:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            self.img = self.imgs2[self.contador_animacion]
                elif self.linea == "mid":
                    if self.posicion == 1:
                        print("1 mid")
                        # SELECCIONADOR DE IMAGENES EN FASE 1
                        if self.x == 1018 and self.y == 469 or self.x == 988 and self.y == 490:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            self.img = self.imgs2[self.contador_animacion]
                    elif self.posicion == 2:
                        print("2 mid")
                        # SELECCIONADOR DE IMAGENES EN FASE 1
                        if self.x == 987 and self.y == 562:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            self.img = self.imgs2[self.contador_animacion]
                elif self.linea == "bot":
                    if self.posicion == 1:
                        print("1 bot")
                        # SELECCIONADOR DE IMAGENES EN FASE 1
                        if self.x == 1345 and self.y == 727:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            if self.x == 1348 and self.y == 724:
                                self.img = self.imgs4[self.contador_animacion]
                            else:
                                if self.x <= 1348 and self.y >= 724:
                                    self.img = self.imgs2[self.contador_animacion]
                                else:
                                    self.img = self.imgs[self.contador_animacion]
                    elif self.posicion == 2:
                        print("2 bot")
                        # SELECCIONADOR DE IMAGENES EN FASE 1
                        if self.x == 1385 and self.y == 754:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            if self.x <= 1400 and self.y >= 739:
                                self.img = self.imgs2[self.contador_animacion]
                            else:
                                self.img = self.imgs[self.contador_animacion]
            elif not self.torre_1_derecha and self.torre_2_derecha and self.torre_1_izquierda and self.torre_2_izquierda:
                print("FASE 2D")
                if self.linea == "top":
                    if self.posicion == 1:
                        print("1 top")
                        # SELECCIONADOR DE IMAGENES EN FASE 2 DERROTA
                        if self.x == 1053 and self.y == 125:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            self.img = self.imgs2[self.contador_animacion]
                    elif self.posicion == 2:
                        print("2 top")
                        # SELECCIONADOR DE IMAGENES EN FASE 2 DERROTA
                        if self.x == 1053 and self.y == 175:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            self.img = self.imgs2[self.contador_animacion]
                elif self.linea == "mid":
                    if self.posicion == 1:
                        print("1 mid")
                        # SELECCIONADOR DE IMAGENES EN FASE 2 DERROTA
                        if self.x == 1156 and self.y == 331:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            self.img = self.imgs2[self.contador_animacion]
                    elif self.posicion == 2:
                        print("2 mid")
                        # SELECCIONADOR DE IMAGENES EN FASE 2 DERROTA
                        if self.x == 1194 and self.y == 364:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            self.img = self.imgs2[self.contador_animacion]
                elif self.linea == "bot":
                    if self.posicion == 1:
                        print("1 bot")
                        # SELECCIONADOR DE IMAGENES EN FASE 2 DERROTA
                        if self.x == 1348 and self.y == 436:
                            self.img = self.imgs4[self.contador_animacion]
                        else:
                            self.img = self.imgs[self.contador_animacion]
                    elif self.posicion == 2:
                        print("2 bot")
                        # SELECCIONADOR DE IMAGENES EN FASE 2 DERROTA
                        if self.x == 1400 and self.y == 436:
                            self.img = self.imgs4[self.contador_animacion]
                        else:
                            self.img = self.imgs[self.contador_animacion]
            elif fase3d:
                print("FASE 3D")
                if self.linea == "top":
                    if self.posicion == 1:
                        print("1 top")
                        # SELECCIONADOR DE IMAGENES EN FASE 3 DERROTA
                        if self.x == 1233 and self.y == 125:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            self.img = self.imgs2[self.contador_animacion]
                    elif self.posicion == 2:
                        print("2 top")
                        # SELECCIONADOR DE IMAGENES EN FASE 3 DERROTA
                        if self.x == 1233 and self.y == 175:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            self.img = self.imgs2[self.contador_animacion]
                elif self.linea == "mid":
                    if self.posicion == 1:
                        print("1 mid")
                        # SELECCIONADOR DE IMAGENES EN FASE 3 DERROTA
                        if self.x == 1240 and self.y == 247:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            self.img = self.imgs2[self.contador_animacion]
                    elif self.posicion == 2:
                        print("2 mid")
                        # SELECCIONADOR DE IMAGENES EN FASE 3 DERROTA
                        if self.x == 1278 and self.y == 280:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            self.img = self.imgs2[self.contador_animacion]
                elif self.linea == "bot":
                    if self.posicion == 1:
                        print("1 bot")
                        # SELECCIONADOR DE IMAGENES EN FASE 3 DERROTA
                        if self.x == 1348 and self.y == 256:
                            self.img = self.imgs4[self.contador_animacion]
                        else:
                            self.img = self.imgs[self.contador_animacion]
                    elif self.posicion == 2:
                        print("2 bot")
                        # SELECCIONADOR DE IMAGENES EN FASE 3 DERROTA
                        if self.x == 1400 and self.y == 256:
                            self.img = self.imgs4[self.contador_animacion]
                        else:
                            self.img = self.imgs[self.contador_animacion]
            elif self.torre_1_derecha and self.torre_2_derecha and not self.torre_1_izquierda and self.torre_2_izquierda:
                print("FASE 2V")
                if self.linea == "top":
                    if self.posicion == 1:
                        print("1 top")
                        # SELECCIONADOR DE IMAGENES EN FASE 2 VICTORIA
                        if self.x == 492 and self.y == 431:
                            self.img = self.imgs4[self.contador_animacion]
                        else:
                            if self.x == 492 and self.y > 296:
                                self.img = self.imgs[self.contador_animacion]
                            else:
                                self.img = self.imgs2[self.contador_animacion]
                    elif self.posicion == 2:
                        print("2 top")
                        if self.x == 690 and self.y == 175:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            if self.x == 534 and self.y == 331 or self.x == 534 and self.y == 433:
                                self.img = self.imgs4[self.contador_animacion]
                            else:
                                if self.x == 534 and self.y > 331:
                                    self.img = self.imgs[self.contador_animacion]
                                else:
                                    self.img = self.imgs2[self.contador_animacion]
                elif self.linea == "mid":
                    if self.posicion == 1:
                        print("1 mid")
                        # SELECCIONADOR DE IMAGENES EN FASE 2 VICTORIA
                        if self.x == 1018 and self.y == 469 or self.x == 997 and self.y == 490 or self.x == 829 and self.y == 535:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            self.img = self.imgs2[self.contador_animacion]
                    elif self.posicion == 2:
                        print("2 mid")
                        # SELECCIONADOR DE IMAGENES EN FASE 2 VICTORIA
                        if self.x == 996 and self.y == 562 or self.x == 900 and self.y == 562 or self.x == 864 and self.y == 565:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            self.img = self.imgs2[self.contador_animacion]
                elif self.linea == "bot":
                    if self.posicion == 1:
                        print("1 bot")
                        # SELECCIONADOR DE IMAGENES EN FASE 2 VICTORIA
                        if self.x == 1030 and self.y == 859 or self.x == 1213 and self.y == 859:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            if self.x == 1348 and self.y == 724:
                                self.img = self.imgs4[self.contador_animacion]
                            else:
                                if self.x <= 1348 and self.y >= 724:
                                    self.img = self.imgs2[self.contador_animacion]
                                else:
                                    self.img = self.imgs[self.contador_animacion]
                    elif self.posicion == 2:
                        print("2 bot")
                        # SELECCIONADOR DE IMAGENES EN FASE 2 VICTORIA
                        if self.x == 1031 and self.y == 910:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            if self.x <= 1400 and self.y >= 739:
                                self.img = self.imgs2[self.contador_animacion]
                            else:
                                self.img = self.imgs[self.contador_animacion]
            elif fase3v:
                print("FASE 3V")
                if self.linea == "top":
                    if self.posicion == 1:
                        print("1 top")
                        # SELECCIONADOR DE IMAGENES EN FASE 3 VICTORIA
                        if self.x == 492 and self.y == 572:
                            self.img = self.imgs4[self.contador_animacion]
                        else:
                            if self.x == 492 and self.y > 296:
                                self.img = self.imgs[self.contador_animacion]
                            else:
                                self.img = self.imgs2[self.contador_animacion]
                    elif self.posicion == 2:
                        print("2 top")
                        # SELECCIONADOR DE IMAGENES EN FASE 3 VICTORIA
                        if self.x == 690 and self.y == 175:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            if self.x == 534 and self.y == 331 or self.x == 534 and self.y == 574:
                                self.img = self.imgs4[self.contador_animacion]
                            else:
                                if self.x == 534 and self.y > 331:
                                    self.img = self.imgs[self.contador_animacion]
                                else:
                                    self.img = self.imgs2[self.contador_animacion]
                elif self.linea == "mid":
                    if self.posicion == 1:
                        print("1 mid")
                        # SELECCIONADOR DE IMAGENES EN FASE 3 VICTORIA
                        if self.x == 1018 and self.y == 469 or self.x == 997 and self.y == 490 or self.x == 739 and self.y == 625:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            self.img = self.imgs2[self.contador_animacion]
                    elif self.posicion == 2:
                        print("2 mid")
                        # SELECCIONADOR DE IMAGENES EN FASE 3 VICTORIA
                        if self.x == 996 and self.y == 562 or self.x == 900 and self.y == 562 or self.x == 768 and self.y == 661:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            self.img = self.imgs2[self.contador_animacion]
                elif self.linea == "bot":
                    if self.posicion == 1:
                        print("1 bot")
                        # SELECCIONADOR DE IMAGENES EN FASE 3 VICTORIA
                        if self.x == 835 and self.y == 859 or self.x == 1213 and self.y == 859:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            if self.x == 1348 and self.y == 724:
                                self.img = self.imgs4[self.contador_animacion]
                            else:
                                if self.x <= 1348 and self.y >= 724:
                                    self.img = self.imgs2[self.contador_animacion]
                                else:
                                    self.img = self.imgs[self.contador_animacion]
                    elif self.posicion == 2:
                        print("2 bot")
                        # SELECCIONADOR DE IMAGENES EN FASE 3 VICTORIA
                        if self.x == 836 and self.y == 910:
                            self.img = self.imgs3[self.contador_animacion]
                        else:
                            if self.x <= 1400 and self.y >= 739:
                                self.img = self.imgs2[self.contador_animacion]
                            else:
                                self.img = self.imgs[self.contador_animacion]

            if self.linea != "":
                self.contador_animacion += 1
                #ESTE IF REINICIARA EL CONTADOR DE ANIMACIONES PAR A SIMULAR EL MOVIMIENTO DE LA IMGANES
                if self.contador_animacion >= len(self.imgs):
                    self.contador_animacion = 0

                if self.health > 0:
                    win.blit(self.img, (self.x, self.y))
                else:
                    win.blit(self.img, (10000, 10000))
                    self.health = 0
                    self.path_pos = 0

                self.mover()
                if self.health > 0:
                    self.draw_health_bar(win)

    def colision(self, X, Y):
        """
        DETECTA QUE EL SUBDITO RECIBA UNA COLISION
        :param x: INT
        :param y: INT
        :return: BOOLEAN
        """
        #ESTE IF COMPROBARA MEDIANTE LAS POSICIONES EN EL EJE SI HAN GOLPEADO AL SUBDITO
        if X <= self.x + self.width and X >= self.x:
            if Y <= self.y + self.height and Y >=self.y:
                return True
        return False


    def mover(self):
        """
        MUEVE AL SUBDITO
        :return: NADA
        """
        # SELECCIONAR EL PATH SEGUN EL ESTADO DE LA PARTIDA
        if self.health > 0:
            if self.torre_1_derecha and self.torre_2_derecha and self.torre_1_izquierda and self.torre_2_izquierda:
                print("FASE 1")
                self.path = self.path1
            elif not self.torre_1_derecha and self.torre_2_derecha and not self.torre_1_izquierda and self.torre_2_izquierda:
                print("FASE 1")
                self.path = self.path1
            elif not self.torre_1_derecha and not self.torre_2_derecha and not self.torre_1_izquierda and not self.torre_2_izquierda:
                print("FASE 1")
                self.path = self.path1
            elif self.torre_1_derecha and self.torre_2_derecha and not self.torre_1_izquierda and self.torre_2_izquierda:
                print("FASE 2V")
                self.path = self.path2v
            elif self.torre_1_derecha and self.torre_2_derecha and not self.torre_1_izquierda and not self.torre_2_izquierda:
                print("FASE 3V")
                self.path = self.path3v
            elif not self.torre_1_derecha and self.torre_2_derecha and not self.torre_1_izquierda and not self.torre_2_izquierda:
                print("FASE 3V")
                self.path = self.path3v
            elif not self.torre_1_derecha and self.torre_2_derecha and self.torre_1_izquierda and self.torre_2_izquierda:
                print("FASE 2D")
                self.path = self.path2d
            elif not self.torre_1_derecha and not self.torre_2_derecha and self.torre_1_izquierda and self.torre_2_izquierda:
                print("FASE 3D")
                self.path = self.path3d
            elif not self.torre_1_derecha and not self.torre_2_derecha and not self.torre_1_izquierda and self.torre_2_izquierda:
                print("FASE 3D")
                self.path = self.path3d

        #TODA ESTA MIERDA ES PARA CALCULAR EL MOVIMIENTO ENTRE PUNTOS MEDIANTE EL TEOREMA DE PITAGORAS(VECTORES)
        if self.health <= 0:
            self.path_pos = 0


        x1,y1 = self.path[self.path_pos]
        print(self.path[self.path_pos], self.nombre)

        if self.path_pos + 1 >= len(self.path):
            x2, y2 = (x1, y1)
        else:
            x2,y2 = self.path[self.path_pos+1]

        move_dis = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)

        self.cont_mover += 1
        dirn = (x2-x1, y2-y1)

        mover_x, mover_y = (self.x + dirn[0] * self.cont_mover, self.y + dirn[1] * self.cont_mover)
        self.dis += math.sqrt((mover_x - x1) ** 2 + (mover_y - y1) ** 2)

        #VA AL SIGUIENTE PUNTO
        if self.dis >= move_dis:
            self.dis = 0
            self.cont_mover = 0
                #self.path_pos=0
                #self.path_pos += 1
            if self.path_pos < len(self.path)-1:
                self.path_pos += 1
            else:
                return False

            self.x = mover_x
            self.y = mover_y
        return True

    def hit(self):
        """
        DEVUELVE SI EL SUBDITO HA SIDO GOLPEADO Y LE RESTA VIDA
        :return: BOOLEAN
        """
        dmg = random.choice(range(0, 3))
        #dmg = 10
        self.health -= dmg
        if self.health <= 0:
            self.path_pos = 0
            self.health = 0

    def draw_health_bar(self, win):  # Barra de vida
        """
        draw health bar above enemy
        :param win: surface
        :return: None
        """

        length = 25
        move_by = length / self.max_health
        health_bar = round(move_by * self.health)

        pygame.draw.rect(win, (255, 0, 0), (self.x - 0, self.y - 7, length, 5), 0)
        pygame.draw.rect(win, (0, 255, 0), (self.x - 0, self.y - 7, health_bar, 5), 0)

    """
    Si el estado esta en True quiere decir que el minion se va a dibujar
    Si el estado esta en False quiere decir que el minion no se va a dibujar
    """

    def estado_partida(self):
        if self.estado:
            self.posicion = 0
            self.linea = ""
            self.estado = False
        else:
            self.estado = True
            self.contador_animacion = 0
            self.health = 400  # Barra de vida
            self.x = self.path[0][0]
            self.y = self.path[0][1]
            self.dis = 0
            self.path_pos = 0
            self.cont_mover = 0
            self.dist_mover = 0

            self.cont = 0